import {
  NodeElement,
  NodeSection,
  SubCategory,
} from "@src/utils/ManifestLoader";
import SidebarSection from "./SidebarSection";
import { LeafClickHandler } from "@feature/common/Sidebar/Sidebar";
import { sendEventToMix } from "@src/services/MixpanelServices";
import { NumpySvg, ScipySvg } from "@src/assets/ArithmeticSVG";

const colorMap = {
  AI_ML: "accent2",
  GENERATORS: "accent2",
  VISUALIZERS: "accent2",
  LOADERS: "accent1",
  TRANSFORMERS: "accent1",
  INSTRUMENTS: "accent4",
  LOGIC_GATES: "accent3",
  NUMPY: "blue-500",
  SCIPY: "blue-500",
  SKLEARN: "blue-500",
};

const autogeneratedCategories = ["NUMPY", "SCIPY", "SKLEARN"];

const iconMap = {
  NUMPY: <NumpySvg className="h-8 w-8" />,
  SCIPY: <ScipySvg className="h-8 w-8" />,
};

type SidebarNodeProps = {
  depth: number;
  node: NodeSection | SubCategory;
  leafClickHandler: LeafClickHandler;
  query: string;
  matchedParent: boolean;
  expand: boolean;
  collapse: boolean;
  color?: string;
  autogeneratedCategory?: boolean;
  icon?: React.ReactNode;
};

const nodeTitleMatches = (query: string, node: NodeSection) =>
  Boolean(
    query !== "" &&
      node.name?.toLocaleLowerCase().includes(query.toLocaleLowerCase())
  );

const SidebarNode = ({
  depth,
  node,
  leafClickHandler,
  query,
  matchedParent = false,
  expand,
  collapse,
  color,
  autogeneratedCategory,
  icon,
}: SidebarNodeProps) => {
  if (node.name === "ROOT") {
    return (
      <div>
        {node.children.map((c) => {
          // Actually needs to be called as a function to achieve depth-first traversal,
          // otherwise React lazily evaluates it and doesn't recurse immediately, resulting in breadth-first traversal.
          return SidebarNode({
            node: c,
            depth: 0,
            leafClickHandler,
            query,
            matchedParent: nodeTitleMatches(query, c),
            expand,
            collapse,
            color: colorMap[c.key] ?? "accent1",
            autogeneratedCategory: autogeneratedCategories.includes(c.key),
            icon: iconMap[c.key],
          });
        })}
      </div>
    );
  }
  const categoryHasNode = (node.children as any[])?.every((n) => !n.children);

  if (!categoryHasNode) {
    return (
      <SidebarSection
        title={node.name ?? ""}
        depth={depth + 1}
        expand={expand}
        collapse={collapse}
        key={node.name}
        color={color}
        autogeneratedCategory={autogeneratedCategory}
        icon={icon}
      >
        {node.children?.map((c) =>
          SidebarNode({
            node: c,
            depth: depth + 1,
            leafClickHandler,
            query,
            matchedParent: matchedParent || nodeTitleMatches(query, c),
            expand,
            collapse,
            color,
            autogeneratedCategory,
            icon,
          })
        )}
      </SidebarSection>
    );
  }

  const commands = (node.children as any[])?.filter((c) => !c.children);
  const lowercased = query.toLocaleLowerCase();
  const shouldFilter = query !== "" && !matchedParent;
  const searchMatches = shouldFilter
    ? commands?.filter(
        (c) =>
          c.key?.toLocaleLowerCase().includes(lowercased) ||
          c.name?.toLocaleLowerCase().includes(lowercased)
      )
    : commands;

  if (searchMatches?.length === 0) {
    return null;
  }
  return (
    <div key={node.name}>
      <SidebarSection
        title={node.name ?? ""}
        depth={depth + 1}
        expand={expand}
        collapse={collapse}
        key={node.name}
        color={color}
        autogeneratedCategory={autogeneratedCategory}
        icon={icon}
      >
        {searchMatches?.map((command) => (
          <button
            key={command.key}
            className={`mb-1.5 flex max-h-10 w-11/12 items-center justify-between px-2 py-2.5 text-${color} bg-${color}/5 border border-${color} rounded-sm font-mono`}
            onClick={() => {
              if (query !== "") {
                sendEventToMix(
                  "Node Searched",
                  command.name ?? "",
                  "nodeTitle"
                );
              }
              leafClickHandler(command as unknown as NodeElement);
            }}
          >
            {command.key ?? command.name}
            {icon}
          </button>
        ))}
      </SidebarSection>
    </div>
  );
};

export default SidebarNode;
