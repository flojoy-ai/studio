{"SIMULATION": {"SINE.py": "import numpy as np\nfrom flojoy import flojoy, DataContainer\nfrom scipy import signal\n\n@flojoy\ndef SINE(v, params):\n    valid_waveforms = [\"sine\", \"square\", \"triangle\", \"sawtooth\"]\n    print(' sine params: ', params)\n    x = None\n    if v.__len__() > 0:\n        x = v[0].y\n\n    waveform = params['waveform']\n    A = int(params['amplitude'])\n    F = int(params['frequency'])\n    Y0 =int( params['offset'])\n    if waveform not in valid_waveforms:\n        waveform = valid_waveforms[0]\n        print('invalid waveform passed as param, using default:', waveform)\n\n    if waveform == 'sine':\n        y = Y0 + A * np.sin(np.radians(2 * np.pi * F) * x)\n    elif waveform == 'square':\n        y = Y0 + A * signal.square(2 * np.pi * F * x / 10)\n    elif waveform == 'triangle':\n        y = Y0 + A * signal.sawtooth(2 * np.pi * F * x / 10, 0.5)\n    elif waveform == 'sawtooth':\n        y = Y0 + A * signal.sawtooth(2 * np.pi * F / 10 * x)\n\n    return DataContainer(x = x, y = y)\n", "LINSPACE.py": "import numpy as np\nfrom flojoy import flojoy, DataContainer\n\n@flojoy\ndef LINSPACE(v, params):\n    x = None\n    if v.__len__() > 0:\n        x = v[0].y\n    y = np.linspace(int(params['start']), int(params['end']), int(params['step']))\n    result = DataContainer(x = x, y = y)\n    return result", "CONSTANT.py": "import numpy as np\nfrom flojoy import flojoy, DataContainer\n\n@flojoy\ndef CONSTANT(v, params):\n    # ''' Generates a single x-y vector of numeric (floating point) constants'''\n    print('constant params: ',params)\n\n    if v.__len__() > 0:\n        x = v[0].y\n        y = np.full(len(x), float(params['constant']))\n        return DataContainer(x = x, y = y)\n\n    x = list()\n    for i in range(1000):\n        x.append(i)\n    y = np.full(1000, float(params['constant']))\n\n    return DataContainer(x = x, y = y)\n", "RAND.py": "import numpy as np\nfrom flojoy import flojoy, DataContainer\nimport traceback\n\n@flojoy\ndef RAND(v, params):\n    try:\n        x = v[0].y\n        # y = x\n        y = np.random.normal(size=len(x))\n    except Exception:\n        print(traceback.format_exc())\n\n    return DataContainer(x = x, y = y)\n"}, "TRANSFORMER": {"ADD.py": "import numpy as np\nfrom flojoy import flojoy, DataContainer\n\n@flojoy\ndef ADD(v, params):\n    ''' Add 2 input vectors and return the result '''\n    # print(' v in add node: ', v)\n    a = [0]\n    b = [0]\n\n    if len(v) == 2:\n        a = v[0].y\n        b = v[1]['y']\n\n    y = np.add(a, b)\n\n    return DataContainer(x = [a, b], y = y)", "MULTIPLY.py": "import numpy as np\nfrom flojoy import flojoy, DataContainer\n\n\n@flojoy\ndef MULTIPLY(v, params):\n    ''' Takes 2 input vectors, multiplies them, and returns the result '''\n    a = v[0].y\n    b = v[1].y\n    y = np.multiply(a, b)\n    return DataContainer(x=[a, b], y=y)\n"}, "VISOR": {"HISTOGRAM.py": "from flojoy import flojoy\nfrom .template import init_template\n\n@flojoy\ndef HISTOGRAM(v, params):\n\n    fig = dict(\n        data = [dict(\n            x = list(v[0].x),\n            type='histogram'\n        )],\n        layout = dict(template = init_template())\n    )\n    return fig", "template.py": "import plotly.graph_objects as go\n\ndef init_template():\n\n    template = go.layout.Template()\n\n    # pythonic autotyping of numeric strings\n    template.layout.autotypenumbers = \"strict\"\n\n    # minimiz margins\n    # template.layout.margin = dict(t=0, l=10, b=10, r=0)\n\n    return template\n\n", "SCATTER3D.py": "from flojoy import flojoy\nfrom .template import init_template\n\n@flojoy\ndef SCATTER3D(v, params):\n\n    fig = dict(\n        data = [dict(\n            x = list(v[0].x),\n            y = list(v[0].y),\n            z =  list([0] * len(v[0].x)),\n            type='scatter3d',\n            mode='markers'\n        )],\n        layout = dict(template = init_template())\n    )\n    # list(v[0].z) if v[0].z is not None else\n    return fig", "SURFACE3D.py": "from flojoy import flojoy\nfrom .template import init_template\n\n@flojoy\ndef SURFACE3D(v, params):\n\n    fig = dict(\n        data = [dict(\n            x = list(v[0].x),\n            y = list(v[0].y),\n            z = list([0] * len(v[0].y)),\n            type='surface'\n        )],\n        layout = dict(template = init_template())\n    )\n    # list(v[0].z) if v[0].z is not None else\n    return fig", "LINE.py": "from flojoy import flojoy\nfrom .template import init_template\n\n@flojoy\ndef LINE(v, params):\n\n    fig = dict(\n        data = [dict(\n            x = list(v[0].x),\n            y = list(v[0].y),\n            type='scatter',\n            mode='lines'\n        )],\n        layout = dict(template = init_template())\n    )\n    return fig", "SCATTER.py": "from flojoy import flojoy\nfrom .template import init_template\n\n@flojoy\ndef SCATTER(v, params):\n\n    fig = dict(\n        data = [dict(\n            x = list(v[0].x),\n            y = list(v[0].y),\n            type='scatter',\n            mode='markers'\n        )],\n        layout = dict(template = init_template())\n    )\n    return fig", "BAR.py": "from flojoy import flojoy\nfrom .template import init_template\n\n@flojoy\ndef BAR(v, params):\n    fig = dict(\n        data = [dict(\n            x = list(v[0].x),\n            y = list(v[0].y),\n            type='bar'\n        )],\n        layout = dict(template = init_template())\n    )\n    return fig"}, "CONDITIONAL": {"CONDITIONAL.py": "from flojoy import flojoy,DataContainer\n\ndef compare_values(first_value,second_value,operator):\n    bool_ = None\n    if operator == \"<=\":\n        bool_ = first_value <= second_value\n    elif operator == \">\":\n        bool_ = first_value > second_value\n    elif operator == \"<\":\n        bool_ = first_value < second_value\n    elif operator == \">=\":\n        bool_ = first_value >= second_value\n    elif operator == \"!=\" :\n        bool_ = first_value != second_value\n    else:\n        bool_ = first_value == second_value\n    return bool_\n\n@flojoy\ndef CONDITIONAL(v,params):\n    print(\"EXECUTING CONDITIONAL PARAMS\")\n\n    operator = params['operator_type']\n\n    type = params['type']\n\n    if type == 'loop':\n\n        initial_value = params['loop_current_iteration']\n        total_iterations = params['loop_total_iteration']\n        step = params['loop_step']\n        current_iteration = params['current_iteration']\n\n        bool_ = compare_values(current_iteration+step,total_iterations,operator)\n\n        if not bool_:\n\n            return {\n                \"data\": DataContainer(x=v[0].x,y=v[0].y),\n                \"type\": 'LOOP',\n                \"params\":{\n                    \"initial_value\" : initial_value,\n                    \"total_iterations\": total_iterations,\n                    \"current_iteration\":current_iteration ,\n                    \"step\":step\n                },\n                \"verdict\": 'finished'\n            }\n\n        else:\n\n            return {\n                \"data\": DataContainer(x=v[0].x,y=v[0].y),\n                \"type\": 'LOOP',\n                \"params\":{\n                    \"initial_value\" : initial_value,\n                    \"total_iterations\": total_iterations,\n                    \"current_iteration\":current_iteration + step,\n                    \"step\":step\n                },\n                \"verdict\": 'ongoing'\n            }\n    else:\n\n        y1 = v[0].y\n        y2 = v[1].y\n\n        bool_ = compare_values(y1[0],y2[0],operator)\n\n        data = None\n\n        if operator in [\"<=\",\"<\"]:\n            if not bool_:\n                data = DataContainer(x=v[0].x,y=v[0].y)\n            else:\n                data = DataContainer(x=v[1].x,y = v[1].y)\n        else:\n            if bool_:\n                data = DataContainer(x=v[0].x,y=v[0].y)\n            else:\n                data = DataContainer(x=v[1].x,y = v[1].y)\n\n        return {\n            \"data\" : data,\n            \"type\" : \"CONDITIONAL\",\n            \"direction\" : bool_\n        }\n"}, "LOOP": {"LOOP.py": "import numpy as np\nfrom flojoy import flojoy,DataContainer\n\n@flojoy\ndef LOOP(v,params):\n\n    print(\"EXECUTING LOOP\")\n\n    print(v)\n\n    if len(v) == 0 or np.any(v[0].y) == None:\n        x = list()\n        for i in range(1000):\n            x.append(i)\n        y = np.full(1000, 1)\n\n        return DataContainer(x=x,y=y)\n\n    x = v[0].x\n    y = v[0].y\n\n\n\n    if x is None:\n        x = np.full(len(y),1)\n\n    return DataContainer(x=x,y=y)"}, "TIMER": {"TIMER.py": "from flojoy import flojoy,DataContainer\nimport time\n\n@flojoy\ndef TIMER(v,params):\n    print(\"executing timer\")\n\n    seconds = int(params['sleep_time'])\n    time.sleep(seconds)\n\n    if len(v) == 0:\n        return DataContainer(x=None,y=None)\n\n\n    return DataContainer(x=v[0].x,y=v[0].y)"}, "ARRAY_AND_MATRIX": {"MATMUL.py": "import numpy as np\nfrom flojoy import flojoy, DataContainer\n\n\n@flojoy\ndef MATMUL(v, params):\n    ''' Takes 2 input matrices, multiplies them, and returns the result '''\n    a = v[0].y\n    b = v[1].y\n    y = np.matmul(a, b)\n    return DataContainer(x=[a, b], y=y)\n"}}