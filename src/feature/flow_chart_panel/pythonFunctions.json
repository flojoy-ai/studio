{"GENERATOR": {"LINSPACE.py": "import numpy as np\nfrom joyflo import flojoy, VectorXY\n\n@flojoy\ndef LINSPACE(v, params):\n    x = np.linspace(int(params['start']), int(params['end']), int(params['step']))\n    result = VectorXY(x = x, y = None)\n    return result", "SINE.py": "import numpy as np\nfrom joyflo import flojoy, VectorXY\nfrom scipy import signal\n\n@flojoy\ndef SINE(v, params):\n    valid_waveforms = [\"sine\", \"square\", \"triangle\", \"sawtooth\"]\n    print(' sine params: ', params)\n\n    x = v[0].x\n\n    waveform = params['waveform']\n    A = int(params['amplitude'])\n    F = int(params['frequency'])\n    Y0 =int( params['offset'])\n    if waveform not in valid_waveforms:\n        waveform = valid_waveforms[0]\n        print('invalid waveform passed as param, using default:', waveform)\n\n    if waveform == 'sine':\n        y = Y0 + A * np.sin(np.radians(2 * np.pi * F) * x)\n    elif waveform == 'square':\n        y = Y0 + A * signal.square(2 * np.pi * F * x / 10)\n    elif waveform == 'triangle':\n        y = Y0 + A * signal.sawtooth(2 * np.pi * F * x / 10, 0.5)\n    elif waveform == 'sawtooth':\n        y = Y0 + A * signal.sawtooth(2 * np.pi * F / 10 * x)\n    \n    return VectorXY(x = x, y = y)\n", "RAND.py": "import numpy as np\nfrom joyflo import flojoy, VectorXY\nimport traceback\n\n@flojoy\ndef RAND(v, params):\n    try:\n        x = v[0].x\n\n        y = np.random.normal(size=len(x))\n    except Exception:\n        print(traceback.format_exc())\n    \n    return VectorXY(x = x, y = y)\n", "CONSTANT.py": "import numpy as np\nfrom joyflo import flojoy, VectorXY\n\n@flojoy\ndef CONSTANT(v, params):\n    # ''' Generates a single x-y vector of numeric (floating point) constants'''\n\n    if v.__len__() > 0:\n        x = v[0].x\n        y = np.full(len(x), float(params['constant']))\n        return VectorXY(x = x, y = y)\n        \n    x = list()\n    for i in range(1000):\n        x.append(i)\n    y = np.full(1000, float(params['constant']))\n    \n    return VectorXY(x = x, y = y)\n"}, "TRANSFORMER": {"ADD.py": "import numpy as np\nfrom joyflo import flojoy, VectorXY\n\n@flojoy\ndef ADD(v, params):\n    ''' Add 2 input vectors and return the result '''\n    print('ADD v:', v);\n    y2 = [0]\n    \n    x = v[0].x\n    if len(v) == 2:\n        y2 = v[1]['y']\n        \n    y = np.add(v[0].y, y2)\n    return VectorXY(x = x, y = y)", "MULTIPLY.py": "import numpy as np\nfrom joyflo import flojoy, VectorXY\n\n@flojoy\ndef MULTIPLY(v, params):\n    ''' Takes 2 input vectors, multiplies them, and returns the result '''\n\n    x = v[0].x\n\n    y = np.multiply(v[0].y, v[1].y)\n\n    return VectorXY(x = x, y = y)"}, "VISOR": {"SURFACE3D.py": "from joyflo import flojoy\nfrom .template import init_template\n\n@flojoy\ndef SURFACE3D(v, params):\n\n    fig = dict(\n        data = [dict(\n            x = list(v[0].x),\n            y = list(v[0].y),\n            z = list(v[0].z) if v[0].z is not None else list([0] * len(v[0].y)),\n            type='surface'\n        )],\n        layout = dict(template = init_template())\n    )\n    return fig", "HISTOGRAM.py": "from joyflo import flojoy\nfrom .template import init_template\n\n@flojoy\ndef HISTOGRAM(v, params):\n\n    fig = dict(\n        data = [dict(x = list(v[0].x), type='histogram',)],\n        layout = dict(template = init_template())\n    )\n    return fig", "LINE.py": "from joyflo import flojoy\nfrom .template import init_template\n\n@flojoy\ndef LINE(v, params):\n\n    fig = dict(\n        data = [dict(\n            x = list(v[0].x),\n            y = list(v[0].y),\n            type='scatter',\n            mode='lines'\n        )],\n        layout = dict(template = init_template())\n    )\n    return fig", "SCATTER3D.py": "from joyflo import flojoy\nfrom .template import init_template\n\n@flojoy\ndef SCATTER3D(v, params):\n\n    fig = dict(\n        data = [dict(\n            x = list(v[0].x),\n            y = list(v[0].y),\n            z = list(v[0].z) if v[0].z is not None else list([0] * len(v[0].x)),\n            type='scatter3d',\n            mode='markers'\n        )],\n        layout = dict(template = init_template())\n    )\n    return fig", "SCATTER.py": "from joyflo import flojoy\nfrom .template import init_template\n\n@flojoy\ndef SCATTER(v, params):\n\n    fig = dict(\n        data = [dict(\n            x = list(v[0].x),\n            y = list(v[0].y),\n            type='scatter',\n            mode='markers'\n        )],\n        layout = dict(template = init_template())\n    )\n    return fig", "BAR.py": "from joyflo import flojoy\nfrom .template import init_template\n\n@flojoy\ndef BAR(v, params):\n\n    fig = dict(\n        data = [dict(x = list(v[0].x), y = list(v[0].y), type='bar')],\n        layout = dict(template = init_template())\n    )\n    return fig", "template.py": "import plotly.graph_objects as go\n\ndef init_template():\n    \n    template = go.layout.Template()\n\n    # pythonic autotyping of numeric strings\n    template.layout.autotypenumbers = \"strict\"\n\n    # minimiz margins\n    # template.layout.margin = dict(t=0, l=10, b=10, r=0)\n\n    return template\n\n"}}