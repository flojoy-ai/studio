{
  "name": "Read CAN Bus",
  "rfInstance": {
    "nodes": [
      {
        "width": 225,
        "height": 225,
        "id": "TEXT_VIEW-99414fa2-83f0-478b-8fa1-ebefca56eaab",
        "type": "VISUALIZATION",
        "data": {
          "id": "TEXT_VIEW-99414fa2-83f0-478b-8fa1-ebefca56eaab",
          "label": "TEXT VIEW",
          "func": "TEXT_VIEW",
          "type": "VISUALIZATION",
          "ctrls": {
            "prettify": {
              "type": "bool",
              "default": false,
              "desc": "Whether to prettify the displayed text (defaults to True)",
              "overload": null,
              "functionName": "TEXT_VIEW",
              "param": "prettify",
              "value": false
            }
          },
          "initCtrls": {},
          "inputs": [
            {
              "name": "default",
              "id": "default",
              "type": "String|Boolean",
              "multiple": false,
              "desc": "The DataContainer to be visualized in text format"
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "String",
              "desc": "The DataContainer containing text data"
            }
          ],
          "path": "DATA/VISUALIZATION/DATA_STRUCTURE/TEXT_VIEW/TEXT_VIEW.py"
        },
        "position": {
          "x": -553.5774397818724,
          "y": -292.1704969095868
        },
        "selected": false,
        "positionAbsolute": {
          "x": -553.5774397818724,
          "y": -292.1704969095868
        },
        "dragging": true
      },
      {
        "width": 192,
        "height": 192,
        "id": "RECEIVE_CAN_MESSAGE-eec770d2-94b0-4799-ab90-ddfadf9fdf43",
        "type": "HARDWARE",
        "data": {
          "id": "RECEIVE_CAN_MESSAGE-eec770d2-94b0-4799-ab90-ddfadf9fdf43",
          "label": "RECEIVE CAN MESSAGE",
          "func": "RECEIVE_CAN_MESSAGE",
          "type": "HARDWARE",
          "ctrls": {
            "CAN_address": {
              "type": "str",
              "default": null,
              "desc": null,
              "overload": null,
              "functionName": "RECEIVE_CAN_MESSAGE",
              "param": "CAN_address",
              "value": "PCAN_USBBUS1"
            },
            "timeout": {
              "type": "int",
              "default": 10,
              "desc": "The timeout in seconds to wait for a message. Default is 10.",
              "overload": null,
              "functionName": "RECEIVE_CAN_MESSAGE",
              "param": "timeout",
              "value": 10
            },
            "raise_error": {
              "type": "bool",
              "default": true,
              "desc": "If True, an exception will be raised if no data is received. Default is True.",
              "overload": null,
              "functionName": "RECEIVE_CAN_MESSAGE",
              "param": "raise_error",
              "value": false
            }
          },
          "initCtrls": {},
          "inputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "multiple": false,
              "desc": null
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Stateful",
              "desc": "Return a can bus message"
            }
          ],
          "pip_dependencies": [
            {
              "name": "python-can",
              "v": "4.3.1"
            }
          ],
          "path": "HARDWARE/PROTOCOLS/CAN/BUS/RECEIVE_CAN_MESSAGE/RECEIVE_CAN_MESSAGE.py"
        },
        "position": {
          "x": 146.84861554506642,
          "y": -318.53525967358075
        },
        "selected": false,
        "positionAbsolute": {
          "x": 146.84861554506642,
          "y": -318.53525967358075
        },
        "dragging": true
      },
      {
        "width": 192,
        "height": 192,
        "id": "MF4_WRITE-31da4262-dc81-46a7-b0e7-d9fe8774719f",
        "type": "HARDWARE",
        "data": {
          "id": "MF4_WRITE-31da4262-dc81-46a7-b0e7-d9fe8774719f",
          "label": "MF4 WRITE",
          "func": "MF4_WRITE",
          "type": "HARDWARE",
          "ctrls": {},
          "initCtrls": {},
          "inputs": [
            {
              "name": "MF4_writer",
              "id": "MF4_writer",
              "type": "Stateful",
              "multiple": false,
              "desc": "A mf4 writer object from a MF4_CREATE_WRITER block."
            },
            {
              "name": "messages",
              "id": "messages",
              "type": "Stateful",
              "multiple": false,
              "desc": "A list of message in the python-can format."
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "desc": "None"
            }
          ],
          "pip_dependencies": [
            {
              "name": "python-can",
              "v": "4.3.1"
            },
            {
              "name": "asammdf",
              "v": "7.4.1"
            }
          ],
          "path": "HARDWARE/PROTOCOLS/CAN/UTILS/MF4_WRITE/MF4_WRITE.py"
        },
        "position": {
          "x": 423.9587741476561,
          "y": -511.3491075653025
        },
        "selected": false,
        "positionAbsolute": {
          "x": 423.9587741476561,
          "y": -511.3491075653025
        },
        "dragging": true
      },
      {
        "width": 96,
        "height": 96,
        "id": "LOOP-744938fd-44a2-4d05-8589-3db5efb27bdf",
        "type": "CONTROL_FLOW",
        "data": {
          "id": "LOOP-744938fd-44a2-4d05-8589-3db5efb27bdf",
          "label": "LOOP",
          "func": "LOOP",
          "type": "CONTROL_FLOW",
          "ctrls": {
            "num_loops": {
              "type": "int",
              "default": -1,
              "desc": "number of times to iterate through body nodes, default is \"-1\" meaning infinity.",
              "overload": null,
              "functionName": "LOOP",
              "param": "num_loops",
              "value": 5
            }
          },
          "initCtrls": {},
          "inputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "multiple": false,
              "desc": null
            }
          ],
          "outputs": [
            {
              "name": "body",
              "id": "body",
              "type": "Any",
              "desc": "Forwards the input DataContainer to the body."
            },
            {
              "name": "end",
              "id": "end",
              "type": "Any",
              "desc": "Forwards the input DataContainer to the end."
            }
          ],
          "path": "CONTROL_FLOW/LOOPS/LOOP/LOOP.py"
        },
        "position": {
          "x": -175.3260349383128,
          "y": -27.2357844104493
        },
        "selected": false,
        "positionAbsolute": {
          "x": -175.3260349383128,
          "y": -27.2357844104493
        },
        "dragging": true
      },
      {
        "width": 192,
        "height": 192,
        "id": "MF4_CREATE_WRITER-94c032f7-296e-47bc-96a2-053579212961",
        "type": "HARDWARE",
        "data": {
          "id": "MF4_CREATE_WRITER-94c032f7-296e-47bc-96a2-053579212961",
          "label": "MF4 CREATE WRITER",
          "func": "MF4_CREATE_WRITER",
          "type": "HARDWARE",
          "ctrls": {
            "dir": {
              "type": "Directory",
              "default": null,
              "desc": "The directory to export to.",
              "overload": null,
              "functionName": "MF4_CREATE_WRITER",
              "param": "dir",
              "value": "C:\\Users\\zzzgu\\Documents\\flojoy\\apps\\PEAK_EXAMPLE"
            },
            "filename": {
              "type": "str",
              "default": "can_exported.mf4",
              "desc": "The name of the file to output.",
              "overload": null,
              "functionName": "MF4_CREATE_WRITER",
              "param": "filename",
              "value": "can_exported.mf4"
            },
            "database": {
              "type": "File",
              "default": null,
              "desc": "Path to a DBC or ARXML file that contains message description.",
              "overload": null,
              "functionName": "MF4_CREATE_WRITER",
              "param": "database",
              "value": ""
            },
            "compression_level": {
              "type": "select",
              "options": [
                "No compression",
                "Deflate (slower, but produces smaller files)",
                "Transposition + Deflate (slowest, but produces the smallest files)"
              ],
              "default": "No compression",
              "desc": "The compression level to use. Defaults to \"No compression\".",
              "overload": null,
              "functionName": "MF4_CREATE_WRITER",
              "param": "compression_level",
              "value": "No compression"
            }
          },
          "initCtrls": {},
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Stateful",
              "desc": "A stateful object that can be used to write CAN data to the file."
            }
          ],
          "pip_dependencies": [
            {
              "name": "python-can",
              "v": "4.3.1"
            },
            {
              "name": "asammdf",
              "v": "7.4.1"
            }
          ],
          "path": "HARDWARE/PROTOCOLS/CAN/UTILS/MF4_CREATE_WRITER/MF4_CREATE_WRITER.py",
          "inputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "multiple": false,
              "desc": null
            }
          ]
        },
        "position": {
          "x": -235.33517759254175,
          "y": -543.4551057662699
        },
        "selected": false,
        "positionAbsolute": {
          "x": -235.33517759254175,
          "y": -543.4551057662699
        },
        "dragging": true
      },
      {
        "width": 192,
        "height": 192,
        "id": "MF4_CLOSE_WRITER-bd485f9f-2980-4851-874c-f8b5f94a9bfd",
        "type": "HARDWARE",
        "data": {
          "id": "MF4_CLOSE_WRITER-bd485f9f-2980-4851-874c-f8b5f94a9bfd",
          "label": "MF4 CLOSE WRITER",
          "func": "MF4_CLOSE_WRITER",
          "type": "HARDWARE",
          "ctrls": {},
          "initCtrls": {},
          "inputs": [
            {
              "name": "MF4_writer",
              "id": "MF4_writer",
              "type": "Stateful",
              "multiple": false,
              "desc": "A mf4 writer object from a MF4_CREATE_WRITER block."
            },
            {
              "name": "default",
              "id": "default",
              "type": "Stateful",
              "multiple": false,
              "desc": null
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "desc": "None"
            }
          ],
          "pip_dependencies": [
            {
              "name": "python-can",
              "v": "4.3.1"
            },
            {
              "name": "asammdf",
              "v": "7.4.1"
            }
          ],
          "path": "HARDWARE/PROTOCOLS/CAN/UTILS/MF4_CLOSE_WRITER/MF4_CLOSE_WRITER.py"
        },
        "position": {
          "x": 114.17753941788519,
          "y": 175.99520600630058
        },
        "selected": false,
        "positionAbsolute": {
          "x": 114.17753941788519,
          "y": 175.99520600630058
        },
        "dragging": true
      },
      {
        "width": 192,
        "height": 192,
        "id": "MF4_CREATE_READER-4a866fac-2679-4964-9a04-e7279ca2c335",
        "type": "HARDWARE",
        "data": {
          "id": "MF4_CREATE_READER-4a866fac-2679-4964-9a04-e7279ca2c335",
          "label": "MF4 CREATE READER",
          "func": "MF4_CREATE_READER",
          "type": "HARDWARE",
          "ctrls": {
            "file": {
              "type": "File",
              "default": null,
              "desc": "The file to write from.",
              "overload": null,
              "functionName": "MF4_CREATE_READER",
              "param": "file",
              "value": "C:\\Users\\zzzgu\\Documents\\flojoy\\apps\\PEAK_EXAMPLE\\can_exported.mf4"
            }
          },
          "initCtrls": {},
          "inputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "multiple": false,
              "desc": null
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Stateful",
              "desc": "A stateful object that contains can a list of message."
            }
          ],
          "pip_dependencies": [
            {
              "name": "python-can",
              "v": "4.3.1"
            },
            {
              "name": "asammdf",
              "v": "7.4.1"
            }
          ],
          "path": "HARDWARE/PROTOCOLS/CAN/UTILS/MF4_CREATE_READER/MF4_CREATE_READER.py"
        },
        "position": {
          "x": 388.441505380396,
          "y": 171.87887472138067
        },
        "selected": false,
        "positionAbsolute": {
          "x": 388.441505380396,
          "y": 171.87887472138067
        },
        "dragging": true
      },
      {
        "width": 192,
        "height": 192,
        "id": "LOAD_DBC-847427b6-85e0-4db3-9c62-d3a841f591ff",
        "type": "HARDWARE",
        "data": {
          "id": "LOAD_DBC-847427b6-85e0-4db3-9c62-d3a841f591ff",
          "label": "LOAD DBC",
          "func": "LOAD_DBC",
          "type": "HARDWARE",
          "ctrls": {
            "file_path": {
              "type": "File",
              "default": null,
              "desc": "The path to the DBC file.",
              "overload": null,
              "functionName": "LOAD_DBC",
              "param": "file_path",
              "value": "C:\\Users\\zzzgu\\Documents\\flojoy\\apps\\PEAK_EXAMPLE\\canmod-temp.dbc"
            }
          },
          "initCtrls": {},
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Stateful",
              "desc": "Return a cantools database object."
            }
          ],
          "pip_dependencies": [
            {
              "name": "python-can",
              "v": "4.3.1"
            },
            {
              "name": "cantools",
              "v": "39.4.2"
            }
          ],
          "path": "HARDWARE/PROTOCOLS/CAN/UTILS/LOAD_DBC/LOAD_DBC.py",
          "inputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "multiple": false,
              "desc": null
            }
          ]
        },
        "position": {
          "x": 374.6321131517166,
          "y": -58.84613631338743
        },
        "selected": false,
        "positionAbsolute": {
          "x": 374.6321131517166,
          "y": -58.84613631338743
        },
        "dragging": true
      },
      {
        "width": 192,
        "height": 192,
        "id": "DECODE_CAN_MESSAGE-51e00bc8-eda7-4816-a5cb-7651ad2ccc16",
        "type": "HARDWARE",
        "data": {
          "id": "DECODE_CAN_MESSAGE-51e00bc8-eda7-4816-a5cb-7651ad2ccc16",
          "label": "DECODE CAN MESSAGE",
          "func": "DECODE_CAN_MESSAGE",
          "type": "HARDWARE",
          "ctrls": {
            "ignore_undefined_id_error": {
              "type": "bool",
              "default": false,
              "desc": "If True, ignore undefined id error. Default is False.",
              "overload": null,
              "functionName": "DECODE_CAN_MESSAGE",
              "param": "ignore_undefined_id_error",
              "value": false
            }
          },
          "initCtrls": {},
          "inputs": [
            {
              "name": "dbc",
              "id": "dbc",
              "type": "Stateful",
              "multiple": false,
              "desc": "The database to use for decoding the message."
            },
            {
              "name": "messages",
              "id": "messages",
              "type": "Stateful",
              "multiple": false,
              "desc": "The message to DECODE_CAN. Must be a can.Message object."
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "DataFrame",
              "desc": "Return dataframe containing the decoded message."
            }
          ],
          "pip_dependencies": [
            {
              "name": "python-can",
              "v": "4.3.1"
            },
            {
              "name": "cantools",
              "v": "39.4.2"
            }
          ],
          "path": "HARDWARE/PROTOCOLS/CAN/UTILS/DECODE_CAN_MESSAGE/DECODE_CAN_MESSAGE.py"
        },
        "position": {
          "x": 737.7210428042669,
          "y": 56.91864874068773
        },
        "selected": false,
        "positionAbsolute": {
          "x": 737.7210428042669,
          "y": 56.91864874068773
        },
        "dragging": true
      },
      {
        "width": 208,
        "height": 96,
        "id": "EXPORT_CSV-3e28c08b-5198-4e2e-bbaa-605f90317212",
        "type": "DATA",
        "data": {
          "id": "EXPORT_CSV-3e28c08b-5198-4e2e-bbaa-605f90317212",
          "label": "EXPORT CSV",
          "func": "EXPORT_CSV",
          "type": "DATA",
          "ctrls": {
            "dir": {
              "type": "Directory",
              "default": null,
              "desc": "The directory to export to.",
              "overload": null,
              "functionName": "EXPORT_CSV",
              "param": "dir",
              "value": "C:\\Users\\zzzgu\\Documents\\flojoy\\apps\\PEAK_EXAMPLE"
            },
            "filename": {
              "type": "str",
              "default": "exported.csv",
              "desc": "The name of the file to output.",
              "overload": null,
              "functionName": "EXPORT_CSV",
              "param": "filename",
              "value": "exported.csv"
            }
          },
          "initCtrls": {},
          "inputs": [
            {
              "name": "dc",
              "id": "dc",
              "type": "OrderedPair|OrderedTriple|DataFrame|Matrix",
              "multiple": false,
              "desc": "The DataContainer to export."
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "desc": null
            }
          ],
          "path": "DATA/EXPORT/EXPORT_CSV/EXPORT_CSV.py"
        },
        "position": {
          "x": 1003.8355230975267,
          "y": -39.84682401250092
        },
        "selected": false,
        "positionAbsolute": {
          "x": 1003.8355230975267,
          "y": -39.84682401250092
        },
        "dragging": true
      },
      {
        "width": 208,
        "height": 96,
        "id": "EXPORT_S3-6a75204c-fa54-4457-8e6a-9504e95c4a40",
        "type": "DATA",
        "data": {
          "id": "EXPORT_S3-6a75204c-fa54-4457-8e6a-9504e95c4a40",
          "label": "EXPORT S3",
          "func": "EXPORT_S3",
          "type": "DATA",
          "ctrls": {
            "s3_access_key": {
              "type": "Secret",
              "default": null,
              "desc": "AWS access key.",
              "overload": null,
              "functionName": "EXPORT_S3",
              "param": "s3_access_key",
              "value": ""
            },
            "s3_secret_key": {
              "type": "Secret",
              "default": null,
              "desc": "AWS secret key.",
              "overload": null,
              "functionName": "EXPORT_S3",
              "param": "s3_secret_key",
              "value": ""
            },
            "bucket": {
              "type": "str",
              "default": "",
              "desc": "The S3 bucket to upload the file to.",
              "overload": null,
              "functionName": "EXPORT_S3",
              "param": "bucket",
              "value": "guillaume-flojoy"
            },
            "region": {
              "type": "select",
              "options": [
                "us-east-1",
                "us-east-2",
                "us-west-1",
                "us-west-2",
                "ca-central-1",
                "ca-west-1",
                "eu-north-1",
                "eu-west-3",
                "eu-west-2",
                "eu-west-1",
                "eu-central-1",
                "eu-south-1",
                "ap-south-1",
                "ap-northeast-1",
                "ap-northeast-2",
                "ap-northeast-3",
                "ap-southeast-1",
                "ap-southeast-2",
                "ap-southeast-3",
                "ap-east-1",
                "sa-east-1",
                "cn-north-1",
                "cn-northwest-1",
                "us-gov-east-1",
                "us-gov-west-1",
                "us-isob-east-1",
                "us-iso-east-1",
                "us-iso-west-1",
                "me-south-1",
                "af-south-1",
                "me-central-1",
                "eu-south-2",
                "eu-central-2",
                "ap-south-2",
                "ap-southeast-4",
                "il-central-1"
              ],
              "default": "us-east-1",
              "desc": "The AWS region (default is \"us-east-1\").",
              "overload": null,
              "functionName": "EXPORT_S3",
              "param": "region",
              "value": "us-east-1"
            },
            "enable_overwrite": {
              "type": "bool",
              "default": false,
              "desc": "Whether to overwrite the file if it already exists (default is False).",
              "overload": null,
              "functionName": "EXPORT_S3",
              "param": "enable_overwrite",
              "value": true
            },
            "file": {
              "type": "File",
              "default": null,
              "desc": "The file to be uploaded to the S3 bucket.",
              "overload": null,
              "functionName": "EXPORT_S3",
              "param": "file",
              "value": "C:\\Users\\zzzgu\\Documents\\flojoy\\apps\\PEAK_EXAMPLE\\exported.csv"
            }
          },
          "initCtrls": {},
          "inputs": [
            {
              "name": "object_name",
              "id": "object_name",
              "type": "String",
              "multiple": false,
              "desc": "Flojoy input to dynamically provide a string for the name of the object in S3. If not specified, the name of the file will be used."
            },
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "multiple": false,
              "desc": null
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Boolean",
              "desc": "Returns a Boolean indicating the success of the file export operation (True if successful, False otherwise)."
            }
          ],
          "pip_dependencies": [
            {
              "name": "boto3",
              "v": "1.34.21"
            }
          ],
          "path": "DATA/EXPORT/EXPORT_S3/EXPORT_S3.py"
        },
        "position": {
          "x": 1263.9873925555482,
          "y": -41.72876340178357
        },
        "selected": false,
        "positionAbsolute": {
          "x": 1263.9873925555482,
          "y": -41.72876340178357
        },
        "dragging": true
      },
      {
        "width": 1277,
        "height": 233,
        "id": "TEXT_VIEW-aea39f9a-9b75-48d4-953a-67ea6dcb8424",
        "type": "VISUALIZATION",
        "data": {
          "id": "TEXT_VIEW-aea39f9a-9b75-48d4-953a-67ea6dcb8424",
          "label": "TEXT VIEW 1",
          "func": "TEXT_VIEW",
          "type": "VISUALIZATION",
          "ctrls": {
            "prettify": {
              "type": "bool",
              "default": false,
              "desc": "Whether to prettify the displayed text (defaults to True)",
              "overload": null,
              "functionName": "TEXT_VIEW",
              "param": "prettify",
              "value": false
            }
          },
          "initCtrls": {},
          "inputs": [
            {
              "name": "default",
              "id": "default",
              "type": "String|Boolean",
              "multiple": false,
              "desc": "The DataContainer to be visualized in text format"
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "String",
              "desc": "The DataContainer containing text data"
            }
          ],
          "path": "DATA/VISUALIZATION/DATA_STRUCTURE/TEXT_VIEW/TEXT_VIEW.py"
        },
        "position": {
          "x": 783.9916910506065,
          "y": -344.17093351188646
        },
        "selected": false,
        "positionAbsolute": {
          "x": 783.9916910506065,
          "y": -344.17093351188646
        },
        "dragging": true,
        "style": {
          "width": 1277,
          "height": 233
        },
        "resizing": false
      },
      {
        "width": 150,
        "height": 180,
        "id": "PRINT_DATACONTAINER-dca6408b-0da9-4cda-888e-250d8fb63ac0",
        "type": "DEBUGGING",
        "data": {
          "id": "PRINT_DATACONTAINER-dca6408b-0da9-4cda-888e-250d8fb63ac0",
          "label": "DISPLAY RAW MESSAGE",
          "func": "PRINT_DATACONTAINER",
          "type": "DEBUGGING",
          "ctrls": {},
          "initCtrls": {},
          "inputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "multiple": false,
              "desc": "The input DataContainer to print."
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "String",
              "desc": "String: Input datacontainer information"
            }
          ],
          "path": "DEBUGGING/PRINT_DATACONTAINER/PRINT_DATACONTAINER.py"
        },
        "position": {
          "x": 490.7719326782403,
          "y": -298.21593179589036
        },
        "selected": false,
        "positionAbsolute": {
          "x": 490.7719326782403,
          "y": -298.21593179589036
        },
        "dragging": true
      },
      {
        "width": 192,
        "height": 192,
        "id": "SET_CAN_BUS_FILTER-62976689-33e5-4ae0-b082-724efe31d24f",
        "type": "HARDWARE",
        "data": {
          "id": "SET_CAN_BUS_FILTER-62976689-33e5-4ae0-b082-724efe31d24f",
          "label": "SET CAN BUS FILTER",
          "func": "SET_CAN_BUS_FILTER",
          "type": "HARDWARE",
          "ctrls": {
            "CAN_address": {
              "type": "str",
              "default": null,
              "desc": "The CAN bus address to attach the filter to.",
              "overload": null,
              "functionName": "SET_CAN_BUS_FILTER",
              "param": "CAN_address",
              "value": "PCAN_USBBUS1"
            },
            "can_id": {
              "type": "int",
              "default": 1,
              "desc": "The ID of the message to filter.",
              "overload": null,
              "functionName": "SET_CAN_BUS_FILTER",
              "param": "can_id",
              "value": 1
            },
            "can_mask": {
              "type": "int",
              "default": 4294967295,
              "desc": "Apply a binary mask to the ID and can_id.",
              "overload": null,
              "functionName": "SET_CAN_BUS_FILTER",
              "param": "can_mask",
              "value": 1
            },
            "extended": {
              "type": "bool",
              "default": false,
              "desc": "If true, only matches messages where <received_is_extended> == extended.",
              "overload": null,
              "functionName": "SET_CAN_BUS_FILTER",
              "param": "extended",
              "value": false
            }
          },
          "initCtrls": {},
          "inputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "multiple": false,
              "desc": null
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "desc": "Optional: None"
            }
          ],
          "pip_dependencies": [
            {
              "name": "python-can",
              "v": "4.3.1"
            }
          ],
          "path": "HARDWARE/PROTOCOLS/CAN/BUS/SET_CAN_BUS_FILTER/SET_CAN_BUS_FILTER.py"
        },
        "position": {
          "x": -530.2830613872087,
          "y": 202.01658230014704
        },
        "selected": false,
        "positionAbsolute": {
          "x": -530.2830613872087,
          "y": 202.01658230014704
        },
        "dragging": true
      },
      {
        "width": 192,
        "height": 192,
        "id": "PEAK_DETECT_AVAILABLE_DEVICES-605db2ff-d926-4c92-a497-39a893557eeb",
        "type": "HARDWARE",
        "data": {
          "id": "PEAK_DETECT_AVAILABLE_DEVICES-605db2ff-d926-4c92-a497-39a893557eeb",
          "label": "PEAK DETECT AVAILABLE DEVICES",
          "func": "PEAK_DETECT_AVAILABLE_DEVICES",
          "type": "HARDWARE",
          "ctrls": {},
          "initCtrls": {},
          "inputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "multiple": false,
              "desc": null
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "String",
              "desc": "A string containing the device name and the channel number."
            }
          ],
          "pip_dependencies": [
            {
              "name": "python-can",
              "v": "4.3.1"
            },
            {
              "name": "uptime",
              "v": "3.0.1"
            }
          ],
          "path": "HARDWARE/PROTOCOLS/CAN/BUS/PEAK_DETECT_AVAILABLE_DEVICES/PEAK_DETECT_AVAILABLE_DEVICES.py"
        },
        "position": {
          "x": -533.835511440627,
          "y": -519.9718131733046
        },
        "selected": false,
        "positionAbsolute": {
          "x": -533.835511440627,
          "y": -519.9718131733046
        },
        "dragging": true
      },
      {
        "width": 192,
        "height": 192,
        "id": "PEAK_CONNECT-0af05748-ac8e-4128-8ed2-279d6c5037dc",
        "type": "HARDWARE",
        "data": {
          "id": "PEAK_CONNECT-0af05748-ac8e-4128-8ed2-279d6c5037dc",
          "label": "PEAK CONNECT",
          "func": "PEAK_CONNECT",
          "type": "HARDWARE",
          "ctrls": {
            "PCAN_address": {
              "type": "str",
              "default": null,
              "desc": "The PCAN device address to connect to. This address can be found by the PCAN_DETECT_AVAILABLE_DEVICES block.\n→ Example: \"PCAN_USBBUS1\"",
              "overload": null,
              "functionName": "PEAK_CONNECT",
              "param": "PCAN_address",
              "value": "PCAN_USBBUS1"
            },
            "bitrate": {
              "type": "int",
              "default": 500000,
              "desc": "The bitrate of the PCAN device. Default is 500000.",
              "overload": null,
              "functionName": "PEAK_CONNECT",
              "param": "bitrate",
              "value": 500000
            }
          },
          "initCtrls": {},
          "inputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "multiple": false,
              "desc": null
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Any",
              "desc": "Optional: None"
            }
          ],
          "pip_dependencies": [
            {
              "name": "python-can",
              "v": "4.3.1"
            },
            {
              "name": "uptime",
              "v": "3.0.1"
            }
          ],
          "path": "HARDWARE/PROTOCOLS/CAN/BUS/PEAK_CONNECT/PEAK_CONNECT.py"
        },
        "position": {
          "x": -537.6624379731959,
          "y": -30.893926624488586
        },
        "selected": false,
        "positionAbsolute": {
          "x": -537.6624379731959,
          "y": -30.893926624488586
        },
        "dragging": true
      },
      {
        "width": 690,
        "height": 671,
        "id": "TABLE-cc22b3e6-45fa-4285-91c9-e2f1d7978fbb",
        "type": "VISUALIZATION",
        "data": {
          "id": "TABLE-cc22b3e6-45fa-4285-91c9-e2f1d7978fbb",
          "label": "TABLE",
          "func": "TABLE",
          "type": "VISUALIZATION",
          "ctrls": {},
          "initCtrls": {},
          "inputs": [
            {
              "name": "default",
              "id": "default",
              "type": "OrderedTriple|OrderedPair|DataFrame|Vector",
              "multiple": false,
              "desc": "the DataContainer to be visualized"
            }
          ],
          "outputs": [
            {
              "name": "default",
              "id": "default",
              "type": "Plotly",
              "desc": "the DataContainer containing the Plotly Table visualization"
            }
          ],
          "path": "DATA/VISUALIZATION/PLOTLY/TABLE/TABLE.py"
        },
        "position": {
          "x": 1008.203524661262,
          "y": 94.072829472139
        },
        "selected": false,
        "positionAbsolute": {
          "x": 1008.203524661262,
          "y": 94.072829472139
        },
        "dragging": true,
        "style": {
          "width": 690,
          "height": 671
        },
        "resizing": false
      }
    ],
    "edges": [
      {
        "source": "PEAK_DETECT_AVAILABLE_DEVICES-605db2ff-d926-4c92-a497-39a893557eeb",
        "sourceHandle": "default",
        "target": "TEXT_VIEW-99414fa2-83f0-478b-8fa1-ebefca56eaab",
        "targetHandle": "default",
        "id": "reactflow__edge-PEAK_DETECT_AVAILABLE_DEVICES-605db2ff-d926-4c92-a497-39a893557eebdefault-TEXT_VIEW-99414fa2-83f0-478b-8fa1-ebefca56eaabdefault"
      },
      {
        "source": "LOOP-744938fd-44a2-4d05-8589-3db5efb27bdf",
        "sourceHandle": "body",
        "target": "RECEIVE_CAN_MESSAGE-eec770d2-94b0-4799-ab90-ddfadf9fdf43",
        "targetHandle": "default",
        "id": "reactflow__edge-LOOP-744938fd-44a2-4d05-8589-3db5efb27bdfbody-RECEIVE_CAN_MESSAGE-eec770d2-94b0-4799-ab90-ddfadf9fdf43default"
      },
      {
        "source": "RECEIVE_CAN_MESSAGE-eec770d2-94b0-4799-ab90-ddfadf9fdf43",
        "sourceHandle": "default",
        "target": "MF4_WRITE-31da4262-dc81-46a7-b0e7-d9fe8774719f",
        "targetHandle": "messages",
        "id": "reactflow__edge-RECEIVE_CAN_MESSAGE-eec770d2-94b0-4799-ab90-ddfadf9fdf43default-MF4_WRITE-31da4262-dc81-46a7-b0e7-d9fe8774719fmessages"
      },
      {
        "source": "MF4_CREATE_WRITER-94c032f7-296e-47bc-96a2-053579212961",
        "sourceHandle": "default",
        "target": "MF4_WRITE-31da4262-dc81-46a7-b0e7-d9fe8774719f",
        "targetHandle": "MF4_writer",
        "id": "reactflow__edge-MF4_CREATE_WRITER-94c032f7-296e-47bc-96a2-053579212961default-MF4_WRITE-31da4262-dc81-46a7-b0e7-d9fe8774719fMF4_writer"
      },
      {
        "source": "SET_CAN_BUS_FILTER-62976689-33e5-4ae0-b082-724efe31d24f",
        "sourceHandle": "default",
        "target": "LOOP-744938fd-44a2-4d05-8589-3db5efb27bdf",
        "targetHandle": "default",
        "id": "reactflow__edge-SET_CAN_BUS_FILTER-62976689-33e5-4ae0-b082-724efe31d24fdefault-LOOP-744938fd-44a2-4d05-8589-3db5efb27bdfdefault"
      },
      {
        "source": "LOOP-744938fd-44a2-4d05-8589-3db5efb27bdf",
        "sourceHandle": "end",
        "target": "MF4_CLOSE_WRITER-bd485f9f-2980-4851-874c-f8b5f94a9bfd",
        "targetHandle": "default",
        "id": "reactflow__edge-LOOP-744938fd-44a2-4d05-8589-3db5efb27bdfend-MF4_CLOSE_WRITER-bd485f9f-2980-4851-874c-f8b5f94a9bfddefault"
      },
      {
        "source": "MF4_CREATE_WRITER-94c032f7-296e-47bc-96a2-053579212961",
        "sourceHandle": "default",
        "target": "MF4_CLOSE_WRITER-bd485f9f-2980-4851-874c-f8b5f94a9bfd",
        "targetHandle": "MF4_writer",
        "id": "reactflow__edge-MF4_CREATE_WRITER-94c032f7-296e-47bc-96a2-053579212961default-MF4_CLOSE_WRITER-bd485f9f-2980-4851-874c-f8b5f94a9bfdMF4_writer"
      },
      {
        "source": "MF4_CLOSE_WRITER-bd485f9f-2980-4851-874c-f8b5f94a9bfd",
        "sourceHandle": "default",
        "target": "MF4_CREATE_READER-4a866fac-2679-4964-9a04-e7279ca2c335",
        "targetHandle": "default",
        "id": "reactflow__edge-MF4_CLOSE_WRITER-bd485f9f-2980-4851-874c-f8b5f94a9bfddefault-MF4_CREATE_READER-4a866fac-2679-4964-9a04-e7279ca2c335default"
      },
      {
        "source": "MF4_CREATE_READER-4a866fac-2679-4964-9a04-e7279ca2c335",
        "sourceHandle": "default",
        "target": "DECODE_CAN_MESSAGE-51e00bc8-eda7-4816-a5cb-7651ad2ccc16",
        "targetHandle": "messages",
        "id": "reactflow__edge-MF4_CREATE_READER-4a866fac-2679-4964-9a04-e7279ca2c335default-DECODE_CAN_MESSAGE-51e00bc8-eda7-4816-a5cb-7651ad2ccc16messages"
      },
      {
        "source": "LOAD_DBC-847427b6-85e0-4db3-9c62-d3a841f591ff",
        "sourceHandle": "default",
        "target": "DECODE_CAN_MESSAGE-51e00bc8-eda7-4816-a5cb-7651ad2ccc16",
        "targetHandle": "dbc",
        "id": "reactflow__edge-LOAD_DBC-847427b6-85e0-4db3-9c62-d3a841f591ffdefault-DECODE_CAN_MESSAGE-51e00bc8-eda7-4816-a5cb-7651ad2ccc16dbc"
      },
      {
        "source": "DECODE_CAN_MESSAGE-51e00bc8-eda7-4816-a5cb-7651ad2ccc16",
        "sourceHandle": "default",
        "target": "EXPORT_CSV-3e28c08b-5198-4e2e-bbaa-605f90317212",
        "targetHandle": "dc",
        "id": "reactflow__edge-DECODE_CAN_MESSAGE-51e00bc8-eda7-4816-a5cb-7651ad2ccc16default-EXPORT_CSV-3e28c08b-5198-4e2e-bbaa-605f90317212dc"
      },
      {
        "source": "EXPORT_CSV-3e28c08b-5198-4e2e-bbaa-605f90317212",
        "sourceHandle": "default",
        "target": "EXPORT_S3-6a75204c-fa54-4457-8e6a-9504e95c4a40",
        "targetHandle": "default",
        "id": "reactflow__edge-EXPORT_CSV-3e28c08b-5198-4e2e-bbaa-605f90317212default-EXPORT_S3-6a75204c-fa54-4457-8e6a-9504e95c4a40default"
      },
      {
        "source": "PRINT_DATACONTAINER-dca6408b-0da9-4cda-888e-250d8fb63ac0",
        "sourceHandle": "default",
        "target": "TEXT_VIEW-aea39f9a-9b75-48d4-953a-67ea6dcb8424",
        "targetHandle": "default",
        "id": "reactflow__edge-PRINT_DATACONTAINER-dca6408b-0da9-4cda-888e-250d8fb63ac0default-TEXT_VIEW-aea39f9a-9b75-48d4-953a-67ea6dcb8424default"
      },
      {
        "source": "RECEIVE_CAN_MESSAGE-eec770d2-94b0-4799-ab90-ddfadf9fdf43",
        "sourceHandle": "default",
        "target": "PRINT_DATACONTAINER-dca6408b-0da9-4cda-888e-250d8fb63ac0",
        "targetHandle": "default",
        "id": "reactflow__edge-RECEIVE_CAN_MESSAGE-eec770d2-94b0-4799-ab90-ddfadf9fdf43default-PRINT_DATACONTAINER-dca6408b-0da9-4cda-888e-250d8fb63ac0default"
      },
      {
        "source": "PEAK_CONNECT-0af05748-ac8e-4128-8ed2-279d6c5037dc",
        "sourceHandle": "default",
        "target": "SET_CAN_BUS_FILTER-62976689-33e5-4ae0-b082-724efe31d24f",
        "targetHandle": "default",
        "id": "reactflow__edge-PEAK_CONNECT-0af05748-ac8e-4128-8ed2-279d6c5037dcdefault-SET_CAN_BUS_FILTER-62976689-33e5-4ae0-b082-724efe31d24fdefault"
      },
      {
        "source": "TEXT_VIEW-99414fa2-83f0-478b-8fa1-ebefca56eaab",
        "sourceHandle": "default",
        "target": "PEAK_CONNECT-0af05748-ac8e-4128-8ed2-279d6c5037dc",
        "targetHandle": "default",
        "id": "reactflow__edge-TEXT_VIEW-99414fa2-83f0-478b-8fa1-ebefca56eaabdefault-PEAK_CONNECT-0af05748-ac8e-4128-8ed2-279d6c5037dcdefault"
      },
      {
        "source": "DECODE_CAN_MESSAGE-51e00bc8-eda7-4816-a5cb-7651ad2ccc16",
        "sourceHandle": "default",
        "target": "TABLE-cc22b3e6-45fa-4285-91c9-e2f1d7978fbb",
        "targetHandle": "default",
        "id": "reactflow__edge-DECODE_CAN_MESSAGE-51e00bc8-eda7-4816-a5cb-7651ad2ccc16default-TABLE-cc22b3e6-45fa-4285-91c9-e2f1d7978fbbdefault"
      }
    ],
    "viewport": {
      "x": 803.626355346428,
      "y": 455.6158501842781,
      "zoom": 0.7727010437043228
    }
  },
  "textNodes": [
    {
      "id": "TextNode-6dedfc42-90bf-4605-925f-792e9f25c848",
      "position": {
        "x": -791.5683826330172,
        "y": -407.8653348291523
      },
      "type": "TextNode",
      "data": {
        "text": "Discover connected PEAK hardware with the PCANDriver"
      },
      "width": 200,
      "height": 150,
      "selected": false,
      "positionAbsolute": {
        "x": -791.5683826330172,
        "y": -407.8653348291523
      },
      "dragging": false
    },
    {
      "id": "TextNode-76939ee6-4f2e-4a91-b79b-5e2e8f8cc5e6",
      "position": {
        "x": 994.5786747134277,
        "y": -78.79315943202482
      },
      "type": "TextNode",
      "data": {
        "text": "Upload the MF4 File to S3"
      },
      "width": 533,
      "height": 160,
      "selected": false,
      "positionAbsolute": {
        "x": 994.5786747134277,
        "y": -78.79315943202482
      },
      "dragging": false,
      "style": {
        "width": 533,
        "height": 160
      },
      "resizing": false
    },
    {
      "id": "TextNode-369b8231-3636-4604-9f04-7161482c34db",
      "position": {
        "x": -288.49712518894705,
        "y": -577.5311197315534
      },
      "type": "TextNode",
      "data": {
        "text": "Read the data and write it to the file.\n\n\n\n"
      },
      "width": 1358,
      "height": 490,
      "selected": false,
      "positionAbsolute": {
        "x": -288.49712518894705,
        "y": -577.5311197315534
      },
      "dragging": false,
      "style": {
        "width": 1358,
        "height": 490
      },
      "resizing": false
    },
    {
      "id": "TextNode-5e6ffd5f-f833-4179-b7c2-14b1c2387640",
      "position": {
        "x": 48.24470096797947,
        "y": -73.27436159988667
      },
      "type": "TextNode",
      "data": {
        "text": "Decode CAN Messages."
      },
      "width": 887,
      "height": 470,
      "selected": false,
      "dragging": false,
      "positionAbsolute": {
        "x": 48.24470096797947,
        "y": -73.27436159988667
      },
      "style": {
        "width": 887,
        "height": 470
      },
      "resizing": false
    }
  ]
}
