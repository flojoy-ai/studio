#!/bin/bash
#
# Run all services required by Flojoy Studio

success_color='\033[38;5;71m'
warning_color='\033[38;5;208m'
error_color='\033[38;5;196m'
info_color='\033[38;5;21m'
general_color='\033[38;5;212m'
info_mark=👉
check_mark=✔
alert_mark=⚠️
error_mark=❌

is_command_successful=0

success_msg()
{
    message=$1
    echo -e "$success_color$check_mark  $message \e[0m"
}
info_msg()
{
    message=$1
    echo -e "$info_color$info_mark $message \e[0m"
}
warning_msg()
{
    message=$1
    echo -e "$warning_color$alert_mark $message \e[0m"

}
error_msg()
{
    message=$1
    echo -e "$error_color$error_mark $message \e[0m"
}

echo '      ============================================================'
echo '     ||                  Welcome to Flojoy!                      ||'
echo '     ||                                                          ||'
echo '     ||         For Installation, Follow the Link Below          ||' 
echo '     ||       https://docs.flojoy.io/getting-started/install/    ||'
echo '     ||                                                          ||'
echo '      ============================================================'
echo ''
venv=""

# gum spin --spinner dot --title 'test' -- npx ttab -t 'test' "source $venv && pip install -r requirements.txt;exit"

djangoPort=8000
initNodePackages=true
initPythonPackages=true


# creating system links

createSystemLinks()
{

   FILE=$PWD/PYTHON/WATCH/STATUS_CODES.yml
   if test -f "$FILE"; then
      info_msg "$FILE exists."
      is_command_successful=$(($is_command_successful+$?))
   else
      ln STATUS_CODES.yml PYTHON/WATCH/
      is_command_successful=$(($is_command_successful+$?))
   fi

   FILE=$PWD/src/STATUS_CODES.yml
   if test -f "$FILE"; then
      info_msg "$FILE exists."
      is_command_successful=$(($is_command_successful+$?))
   else
      ln STATUS_CODES.yml src
      is_command_successful=$(($is_command_successful+$?))
   fi
}
# Gives Feedback if the command run is successful or failed, if failed it exits the execution.

feedback()
{
   is_successful=$1
   message=$2
   help_message=$3
   if [ "$is_successful" -eq 0 ]; then
      success_msg "$message"
      echo ''
   else
      error_msg "$help_message"
      exit
   fi
}

# Help function

helpFunction()
{
   echo ""
   echo "Usage: $0 -n -p -r -v venv-path"
   echo  " -r: shuts down existing Redis server and spins up a fresh one"
   echo  " -v: path to a virtualenv"
   echo  " -n: To not install npm packages"
   echo  " -p: To not install python packages"
   echo 1 # Exit script after printing help
}

# Parse command-line arguments
while [ $# -gt 0 ]
do
    key="$1"
    case $key in
        -n)
        initNodePackages=false
        shift
        ;;
        -p)
        initPythonPackages=false
        shift
        ;;
        -r)
        initRedis=true
        shift
        ;;
        -v)
        venv="$2"
        shift
        shift
        ;;
        -P)
        djangoPort="$2"
        shift
        shift
        ;;
        *) # unknown option
        echo "Unknown option: $1"
        helpFunction
        exit 1
        ;;
    esac
done

# checking if flojoy.yaml file exists

CWD="$PWD"

createFlojoyDirectoryWithYmlFile()
{
   FOLDER=$HOME/.flojoy
   FILE=$HOME/.flojoy/flojoy.yaml
   if test -d "$FOLDER"; then
      if test -f "$FILE"; then
         info_msg "$FILE exists."
         echo "PATH: $CWD" > $FILE
         feedback $? "Updated file path in flojoy.yaml file." "Couldn't update file path in flojoy.yaml file, check the permission or sign in as root user"

      else
         info_msg "file flojoy.yaml in directory $FOLDER does not exists. "
         touch $FILE && echo "PATH: $CWD" > $FILE
         feedback $? "Successfully created flojoy.yaml file in $FOLDER directory." "Couldn't create flojoy.yaml file in $FOLDER directory, check the permission or sign in as root user"
      fi
   else
      info_msg "directory ~/.flojoy/flojoy.yaml does not exists. "
      mkdir "$FOLDER" && touch "$FILE" && echo "PATH: $CWD" > "$FILE"
      feedback $? "Created new $FOLDER directory with flojoy.yaml file." 'Failed to create file in the home directory, check the permission or sign in as root user'
   fi
   CREDENTIALS_FILE=$FOLDER/credentials
   if ! test -f "$CREDENTIALS_FILE"; then
      warning_msg " Warning: Credetials are not set for your project!"
      echo ''
   else
      if ! grep -q 'FRONTIER_API_KEY' "$CREDENTIALS_FILE" >/dev/null 2>&1; then
         warning_msg " Warning: FRONTIER_API_KEY not set for your project!"
         echo ''
      fi
   fi

}
createFlojoyDirectoryWithYmlFile

# update submodules
git submodule update --init --recursive >/dev/null 2>&1
feedback $? 'Updated submodules successfully' 'Failed to update submodules, check if git is installed correctly and configured with your github account.'

 # checking virtual environment

venvCmd=""

if [ -n "$venv" ]
then
   info_msg "Virtual env path is provided, will use: ${venv}"
   echo ''
   venvCmd="${venv}/bin/activate"

   if [ "$(echo -n $venv | tail -c 1)" = '/' ];then
      venvCmd="${venv}bin/activate"
   fi
else
   venv_dir=$HOME/.flojoy/venv
   if test -d "$venv_dir";then
      info_msg "No virtual env provided. Will use virtual env from $venv_dir directory"
      venvCmd="$venv_dir/bin/activate"
   else
      info_msg "No virtual env provided. Will create one in $venv_dir directory."

      cd "$HOME"/.flojoy && mkdir venv && python3 -m venv venv/

      feedback $? 'Virtual environment creation successful' 'Failed to create virtual environment, check if Python at least v.3.10 is installed in your local machine'

      venvCmd="$venv_dir/bin/activate"
   fi
fi

# Install python packages

if [ $initPythonPackages = true ]
then
   cd $CWD
   info_msg "Flag -p is not provided, Python packages will be installed from requirements.txt file"
   echo ''
   source "$venvCmd" && pip install -r requirements.txt >/dev/null 2>&1
   feedback $? 'Python packages installed successfully!' 'Failed to install Python packages, check if pip and Python not lower than v3.10 is installed in your local machine or Try running this script again.'
fi

# Install node packages

if [ $initNodePackages = true ]
then
   info_msg "Argument -n is not provided, Node packages will be installed from package.json"
   echo ''
   cd "$CWD" && npm install --legacy-peer-deps >/dev/null 2>&1
   feedback $? 'Installed Node packages successfully.' 'Node package installation failed, check if npm is installed in your local machine'
fi


# update ES6 status codes file

python3 -c 'import yaml, json; f=open("src/STATUS_CODES.json", "w"); f.write(json.dumps(yaml.safe_load(open("STATUS_CODES.yml").read()), indent=4)); f.close();'

feedback $? 'Updated ES6 status codes file.' 'Failed to update ES6 status codes file, check if all required Python packages are installed. Try running this script without -p argument to install required Python packages automatically. or check if your python version is not lower than 3.10'

# creating system links

createSystemLinks

feedback $is_command_successful 'Created symlinks successfully!' 'Creating symlinks failed, check your PYTHON/WATCH or src folder, maybe one of them is missing'

# jsonify python functions

python3 write_python_metadata.py

feedback $? 'Jsonified Python functions and written to JS-readable directory' 'Error occurred while Jsonifying Python functions, check write_python_metadata.py file, maybe the folders mentioned in the file, one of them is missing or check your python version, we use 3.10 or later version in our project'

# Generate Manifest

python3 generate_manifest.py

feedback $? 'Successfully generated manifest for Python nodes to frontend' 'Failed to generate manifest for Python nodes, check generate_manifest.py file, maybe the folders mentioned in the file, one of them is missing or check your python version, we use 3.10 or later version in our project'

# Start the Django server

if lsof -Pi :"$djangoPort" -sTCP:LISTEN -t >/dev/null ; then
   djangoPort=$((djangoPort + 1))
    npx ttab -t 'Django' "source $venvCmd && python3 write_port_to_env.py $djangoPort && python3 manage.py runserver ${djangoPort}"
else
   npx ttab -t 'Django' "source $venvCmd && python3 write_port_to_env.py $djangoPort && python3 manage.py runserver ${djangoPort}"
fi

feedback $? "Started Django server on port $djangoPort successfully!" 'Failed while starting Django server, check if Django is installed in your local machine or run this script without -p argument to install it.'


# initializing new Redis Instance

if [ "$initRedis" ]
then
   npx ttab -t 'Redis-CLI' "redis-cli SHUTDOWN;sleep 2;redis-cli FLUSHALL;exit"

   feedback $? 'Successfully shut down existing Redis server and cleared Redis memory...' 'Failed to shut down Redis server. redis-cli error: check if redis-cli is running or Redis is installed in your local machine'

   npx ttab -t 'Redis-CLI' "redis-server;sleep 2;exit"

   feedback $? 'Spinned up a fresh Redis server...' 'Failed to spin up a fresh Redis server, try closing and restarting the Redis server'
fi

# Closing All RQ Workers

python3 close-all-rq-workers.py >/dev/null 2>&1

feedback $? 'Closed all existing rq workers (if any).' 'Error occured while closing all existing rq workers (if any): seems like rq package is not installed! Try running this script without -p argument to install required python packages.'

# SHowing RQ WOrker Info

info_msg 'Rq info after closing:'
rq info
echo ''

# Initializing FLOJOY-WATCH RQ Worker
cd $CWD

npx ttab -t 'Flojoy-watch RQ Worker' "source $venvCmd && export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES && rq worker flojoy-watch"

feedback $? 'Started RQ worker for flojoy-watch' 'Starting RQ worker for flojoy-watch failed, check if ttab is installed (npx ttab) or check if rq worker is installed in your python package'


# Initializing FLOJOY RQ Worker

npx ttab -t 'RQ WORKER' "source $venvCmd && cd PYTHON && export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES && rq worker flojoy"

feedback $? 'Started RQ worker for nodes...' 'Starting RQ worker for nodes failed, check if ttab is installed (npx ttab) or check if rq worker is installed in your python package'


# Checking for YOLOV3 Weights


CWD="$PWD"

FILE=$PWD/PYTHON/utils/object_detection/yolov3.weights
if test -f "$FILE"; then
   info_msg "$FILE exists."
else
   touch "$PWD"/PYTHON/utils/object_detection/yolov3.weights
   wget -O "$PWD"/PYTHON/utils/object_detection/yolov3.weights https://pjreddie.com/media/files/yolov3.weights
fi

echo ''

sleep 1

# Initializing React Server

npx ttab -t 'REACT' "source $venvCmd && npm start"
feedback $? 'React server started on port 3000' 'Could not start React server, check is npm installed in your local machine or run the script without -n flag to install the node packages'