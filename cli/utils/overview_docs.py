import dataclasses

from cli.utils.markdown_helper import get_markdown_slug

CATEGORY_TEMPLATE = """\
{header_level} {title}
{content}
"""

OVERVIEW_TEMPLATE_BASE = """\
---
title: {title}
description: "{description}"
slug: {slug}
sidebar:
  order: 1
---

{content}

{{/* DO NOT EDIT THIS FILE! IT IS BEING AUTO GENERATED */}}
{{/* PLEASE REFER TO THE CONTRIBUTION GUIDE ON THE DOCS PAGE */}}

import BlockCategory from "@/components/BlockCategory.astro";

"""

# This means that for all the headers on the overview page,
# we will start with ## (h2) and incrementing to at most ##### (h5)

BASE_HEADER_LEVEL = 2
MAX_HEADER_LEVEL = 5


@dataclasses.dataclass
class BlockInfo:
    link: str
    name: str
    description: str


CategoryTree = list[BlockInfo] | dict[str, "CategoryTree"]


def make_category_content(
    name: str, contents: CategoryTree, depth: int = BASE_HEADER_LEVEL, path: str = ""
) -> str:
    if not depth <= MAX_HEADER_LEVEL:
        raise ValueError(
            f"{path}/{name} category is too nested, the block must placed within {MAX_HEADER_LEVEL} levels deep. In this case, the '{name}' category is already at level {MAX_HEADER_LEVEL}!"
        )
    match contents:
        # leaf (bottom level category)
        case list():
            blocks = [dataclasses.asdict(b) for b in contents]
            content = "<BlockCategory blocks={{{blocks}}} />".format(blocks=blocks)
        # inner node (recurse on children)
        case dict():
            errs = []
            subcontents = []
            for key, val in contents.items():
                try:
                    subcontents.append(
                        make_category_content(
                            key, val, depth + 1, path=f"{path}/{name}"
                        )
                    )
                except ValueError as e:
                    errs.append(str(e))

            if errs:
                raise ValueError("\n".join(errs))
            content = "\n".join(subcontents)

    # don't show the title of the top level category
    if depth == BASE_HEADER_LEVEL:
        return content

    return CATEGORY_TEMPLATE.format(
        header_level="#" * depth, title=name, content=content
    )


class CategoryOverviewDocsBuilder:
    def __init__(
        self,
        title: str,
        category_name: str,
        overview_description: str,
        content: str,
        category_path: str,
    ):
        self.category_name = category_name
        self.template = OVERVIEW_TEMPLATE_BASE.format(
            title=f"{title} Overview",
            description=overview_description.replace('"', '\\"'),
            slug="blocks/" + get_markdown_slug(category_path),
            content=content,
        )

    def add_content(self, content: CategoryTree):
        self.template += make_category_content(self.category_name, content)
        return self

    def build(self):
        self.template += """\

{{/* DO NOT EDIT THIS FILE! IT IS BEING AUTO GENERATED */}}
{{/* PLEASE REFER TO THE CONTRIBUTION GUIDE ON THE DOCS PAGE */}}
""".format()
        return self.template
