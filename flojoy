#!/bin/bash
#
# Run all services required by Flojoy Studio

success_color='\033[38;5;71m'
warning_color='\033[38;5;208m'
error_color='\033[0;31m'
info_color='\033[0;34m'
general_color='\033[38;5;212m'
default_color='\033[0m'
info_mark=👉
check_mark=✔
alert_mark=⚠️
error_mark=❌

is_command_successful=0

success_msg()
{
    message=$1
    echo -e "$success_color$check_mark $message $default_color"
    echo ''
}
info_msg()
{
    message=$1
    echo -e "$info_color$info_mark $message $default_color"
    echo ''
}
warning_msg()
{
    message=$1
    echo -e "$warning_color$alert_mark $message $default_color"
    echo ''
}
error_msg()
{
    message=$1
    echo -e "$error_color$error_mark $message $default_color"
    echo ''
    echo ''
}

echo ''
echo ''
echo '      ============================================================'
echo '     ||                  Welcome to Flojoy!                      ||'
echo '     ||                                                          ||'
echo '     ||         For Installation, Follow the Link Below          ||' 
echo '     ||       https://docs.flojoy.io/getting-started/install/    ||'
echo '     ||                                                          ||'
echo '      ============================================================'
echo ''
venv=""


initNodePackages=true
initPythonPackages=true
is_ci=false
test_ci=false
initSubmodule=true
enableSentry=true
enableTelemetry=false
isDebugMode=false

# Gives Feedback if the command run is successful or failed, if failed it exits the execution.
feedback()
{
   is_successful=$1
   message=$2
   help_message=$3
   if [ "$is_successful" -eq 0 ]; then
      success_msg "$message"
   else
      error_msg "$help_message"
      exit 1
   fi
}

# Help function

helpFunction()
{
   echo ""
   echo "Usage: $0 -n -p -s -S -t -T -d -v venv-path"
   echo  " -v: path to a Python virtual environment"
   echo  " -n: To NOT install npm packages"
   echo  " -p: To NOT install python packages"
   echo  " -s: To NOT update submodules"
   echo  " -S: To NOT enable Sentry"
   echo  " -t: To enable local CI tests"
   echo  " -T: To enable Telemetry"
   echo  " -d: To enable debug mode"
   echo 1 # Exit script after printing help
}

# Parse command-line arguments
while [ $# -gt 0 ]
do
    key="$1"
    case $key in
        -n)
        initNodePackages=false
        shift
        ;;
        -p)
        initPythonPackages=false
        shift
        ;;
        -v)
        venv="$2"
        shift
        shift
        ;;
        -c)
        is_ci=true
        shift
        ;;
        -T)
        enableTelemetry=true
        shift
        ;;
        -S)
        enableSentry=false
        shift
        ;;
        -t)
        test_ci=true #run with CI=true, allows to properly run tests locally 
        shift
        ;;
        -s)
        initSubmodule=false # don't update submodules, prevents overwriting local changes
        shift
        ;;
        -d)
        isDebugMode=true
        shift
        ;;
        *) # unknown option
        echo "Unknown option: $1"
        helpFunction
        exit 1
        ;;
    esac
done



# checking if flojoy.yaml file exists

CWD="$PWD"

createFlojoyDirectoryWithYmlFile()
{
   FOLDER=$HOME/.flojoy
   FILE=$HOME/.flojoy/flojoy.yaml
   if test -d "$FOLDER"; then
      if test -f "$FILE"; then
         info_msg "$FILE exists."
         echo "PATH: $CWD" > $FILE
         feedback $? "Updated file path in flojoy.yaml file." "Couldn't update file path in flojoy.yaml file, check the permission or sign in as root user"

      else
         info_msg "file flojoy.yaml in directory $FOLDER does not exists. "
         touch $FILE && echo "PATH: $CWD" > $FILE
         feedback $? "Successfully created flojoy.yaml file in $FOLDER directory." "Couldn't create flojoy.yaml file in $FOLDER directory, check the permission or sign in as root user"
      fi
   else
      info_msg "directory ~/.flojoy/flojoy.yaml does not exists. "
      mkdir "$FOLDER" && touch "$FILE" && echo "PATH: $CWD" > "$FILE"
      feedback $? "Created new $FOLDER directory with flojoy.yaml file." 'Failed to create file in the home directory, check the permission or sign in as root user'
   fi

   CREDENTIALS_FILE=$FOLDER/credentials.txt
   
   touch "$CREDENTIALS_FILE"
}
createFlojoyDirectoryWithYmlFile

# update submodules
if [ "$initSubmodule" = true ]; then
   git submodule update --init --recursive >/dev/null 2>&1
   feedback $? 'Updated submodules successfully' 'Failed to update submodules, check if git is installed correctly and configured with your github account.'
fi

# checking virtual environment

venvCmd=""

if [ -n "$venv" ]
then
   info_msg "Virtual env path is provided, will use: ${venv}"
   venvCmd="source ${venv}/bin/activate"

   if [ "$(echo -n $venv | tail -c 1)" = '/' ];then
      venvCmd="source ${venv}bin/activate"
   fi
else
   info_msg "No virtual env provided"
fi

# Check if Python, Pip, or npm is missing.
if [ $is_ci = false ];then
   source check-dependencies
   # Call the function to check for dependencies
   missing_dependencies=$(check_dependencies)
   # If there are missing dependencies, print the list of them
   if [ -n "$missing_dependencies" ]; then
   error_msg "$missing_dependencies"
   exit 1
   fi
fi

# Install python packages

if [ $initPythonPackages = true ]
then
   cd $CWD
   info_msg "Flag -p is not provided, Python packages will be installed from requirements.txt file"
   if [ -n "$venv" ];then
      pip_cmd="pip install -r requirements.txt"
   else
      pip_cmd="python3 -m pip install -r requirements.txt"
   fi
   set -o pipefail
   $venvCmd && $pip_cmd 2>&1 | while IFS= read -r line; do
      if [[ $line == Requirement* ]]; then
         echo "$line" | awk -F'in' '{print $1}'
      elif [[ $line == WARNING* ]]; then
         echo ''
      else
         echo "$line"
      fi
   done
   feedback $? 'Python packages installed successfully!' 'Failed to install Python packages. Look at error details printed above.'
fi

# Install node packages

if [ $initNodePackages = true ]
then
   info_msg "Argument -n is not provided, Node packages will be installed from package.json"
   set -o pipefail
   cd "$CWD" && npm install  2>&1 | grep -v 'WARN'   
   feedback $? 'Installed Node packages successfully.' 'Node package installation failed! Look at error details printed above'
fi

# jsonify python functions

$venvCmd && python3 scripts/write_python_metadata.py

feedback $? 'Jsonified Python functions and written to JS-readable directory' 'Error occurred while Jsonifying Python functions. Check errors printed above!'

# Generate Manifest

$venvCmd && python3 PYTHON/generate_manifest.py

feedback $? 'Successfully generated JSON manifest for Python nodes to frontend' 'Failed to generate manifest for Python nodes. Check errors printed above!'

if [ $is_ci = true ];then
   exit 0
fi

# Setup Sentry env var
if [ $enableSentry = true ]
then
  info_msg "Sentry will be enabled!"
  export FLOJOY_ENABLE_SENTRY=1
else
  info_msg "Sentry will be disabled!"
  export FLOJOY_ENABLE_SENTRY=0
fi

# Setup Telemetry
if [ $enableTelemetry = true ]
then
  info_msg "Telemetry will be enabled!"
  export FLOJOY_ENABLE_TELEMETRY=1
else
  info_msg "Telemetry will be disabled!"
  export FLOJOY_ENABLE_TELEMETRY=0
fi

cd $CWD

# YOLOV3 check/download moved to node
# Leave commented until tested?

# Checking for YOLOV3 Weights
# CWD="$PWD"
# FILE=$PWD/PYTHON/utils/object_detection/yolov3.weights
# if test -f "$FILE"; then
#    info_msg "$FILE exists."
# else
#    touch "$PWD"/PYTHON/utils/object_detection/yolov3.weights
#    wget -O "$PWD"/PYTHON/utils/object_detection/yolov3.weights https://pjreddie.com/media/files/yolov3.weights
#    echo ''
# fi

sleep 1


# start project services
if [ $test_ci = true ]; then
   start_project_cmd='npm run start-project:ci'
else 
   start_project_cmd='npm run tauri dev'
fi

if [ $isDebugMode = true ]; then
   start_project_cmd='npm run start-project:debug'
fi

# start project services
if [ -n "$venvCmd" ]; then
   $venvCmd && $start_project_cmd 
else
   $start_project_cmd
fi
