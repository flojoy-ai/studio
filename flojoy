#!/bin/bash
# Run all services required by Flojoy Studio

success_color='\033[38;5;71m'
warning_color='\033[38;5;208m'
error_color='\033[0;31m'
info_color='\033[0;34m'
default_color='\033[0m'
info_mark=👉
check_mark=✔
alert_mark=⚠️
error_mark=❌

success_msg() {
	message=$1
	echo -e "$success_color$check_mark $message $default_color"
	echo ''
}
info_msg() {
	message=$1
	echo -e "$info_color$info_mark $message $default_color"
	echo ''
}
warning_msg() {
	message=$1
	echo -e "$warning_color$alert_mark $message $default_color"
	echo ''
}
error_msg() {
	message=$1
	echo -e "$error_color$error_mark $message $default_color"
	echo ''
	echo ''
}

echo ''
echo ''
echo '      ============================================================'
echo '     ||                  Welcome to Flojoy!                      ||'
echo '     ||                                                          ||'
echo '     ||         For Installation, Follow the Link Below          ||'
echo '     ||       https://docs.flojoy.ai/getting-started/install/    ||'
echo '     ||                                                          ||'
echo '      ============================================================'
echo ''

initNodePackages=true
initPythonPackages=true
is_ci=false
test_ci=false
enableSentry=true
enableTelemetry=true
isDebugMode=false
isRemoteMode=false

# Gives Feedback if the command run is successful or failed, if failed it exits the execution.
feedback() {
	is_successful=$1
	message=$2
	help_message=$3
	if [ "$is_successful" -eq 0 ]; then
		success_msg "$message"
	else
		error_msg "$help_message"
		exit 1
	fi
}

# Help function

helpFunction() {
	echo ""
	echo "Usage: $0 -n -p -S -t -T -d -r"
	echo " -n: To NOT install npm packages"
	echo " -p: To NOT install python packages"
	echo " -S: To NOT enable Sentry"
	echo " -t: To enable local CI tests"
	echo " -T: To disable Telemetry"
	echo " -d: To enable debug mode"
	echo " -r: To start studio in remote mode without electron"
	echo 1 # Exit script after printing help
}

# Parse command-line arguments
while [ $# -gt 0 ]; do
	key="$1"
	case $key in
	-n)
		initNodePackages=false
		shift
		;;
	-p)
		initPythonPackages=false
		shift
		;;
	-c)
		is_ci=true
		shift
		;;
	-T)
		enableTelemetry=false
		shift
		;;
	-S)
		enableSentry=false
		shift
		;;
	-t)
		test_ci=true #run with CI=true, allows to properly run tests locally
		shift
		;;
	-d)
		isDebugMode=true
		shift
		;;
	-r)
		isRemoteMode=true
		shift
		;;
	*) # unknown option
		echo "Unknown option: $1"
		helpFunction
		exit 1
		;;
	esac
done

# checking if flojoy.yaml file exists

CWD="$PWD"

createFlojoyDirectoryWithYmlFile() {
	FOLDER=$HOME/.flojoy
	FILE=$HOME/.flojoy/flojoy.yaml
	if test -d "$FOLDER"; then
		if test -f "$FILE"; then
			info_msg "$FILE exists."
			echo "PATH: $CWD" >$FILE
			feedback $? "Updated file path in flojoy.yaml file." "Couldn't update file path in flojoy.yaml file, check the permission or sign in as root user"

		else
			info_msg "file flojoy.yaml in directory $FOLDER does not exists. "
			touch $FILE && echo "PATH: $CWD" >$FILE
			feedback $? "Successfully created flojoy.yaml file in $FOLDER directory." "Couldn't create flojoy.yaml file in $FOLDER directory, check the permission or sign in as root user"
		fi
	else
		info_msg "directory ~/.flojoy/flojoy.yaml does not exists. "
		mkdir "$FOLDER" && touch "$FILE" && echo "PATH: $CWD" >"$FILE"
		feedback $? "Created new $FOLDER directory with flojoy.yaml file." 'Failed to create file in the home directory, check the permission or sign in as root user'
	fi

	CREDENTIALS_FILE=$FOLDER/credentials.txt

	if ! test -f "$CREDENTIALS_FILE"; then
		touch "$CREDENTIALS_FILE"
	fi
}

createFlojoyDirectoryWithYmlFile

# Check if Python, Pip, or npm is missing.
if [ $is_ci = false ]; then
	source check-dependencies
	# Call the function to check for dependencies
	missing_dependencies=$(check_dependencies)
	# If there are missing dependencies, print the list of them
	if [ -n "$missing_dependencies" ]; then
		error_msg "$missing_dependencies"
		exit 1
	fi
fi

# install pipx if required
if ! python -c "import pipx" &>/dev/null; then
	python -m pip install --user pipx
	python -m pipx ensurepath
fi
poetry_path="$HOME/.local/bin/poetry"

if ! test -f "$poetry_path"; then
	python -m pipx install poetry --force
fi

# Install python packages

if [ $initPythonPackages = true ]; then
	cd "$CWD" || exit
	info_msg "Flag -p is not provided, Python packages will be installed from poetry.lock"
	$poetry_path install
	set -o pipefail
	feedback $? 'Python packages installed successfully!' 'Failed to install Python packages. Look at error details printed above.'
fi

# Install node packages

if [ $initNodePackages = true ]; then
	if ! command -v pnpm; then
		npm install --global pnpm
	fi
	info_msg "Argument -n is not provided, Node packages will be installed from package.json"
	set -o pipefail
	cd "$CWD" && pnpm install 2>&1
	feedback $? 'Installed Node packages successfully.' 'Node package installation failed! Look at error details printed above'
fi

if [ $is_ci = true ]; then
	exit 0
fi

# Setup Sentry env var
if [ $enableSentry = true ]; then
	info_msg "Sentry will be enabled!"
	export FLOJOY_ENABLE_SENTRY=1
else
	info_msg "Sentry will be disabled!"
	export FLOJOY_ENABLE_SENTRY=0
fi

# Setup Telemetry
if [ $enableTelemetry = true ]; then
	info_msg "Telemetry will be enabled!"
	export FLOJOY_ENABLE_TELEMETRY=1
else
	info_msg "Telemetry will be disabled!"
	export FLOJOY_ENABLE_TELEMETRY=0
fi
# setup deploy environment
if [ $isRemoteMode = true ]; then
	info_msg "Electron will be disabled!"
	export DEPLOY_ENV=remote
	blocks_dir=$CWD/PYTHON/blocks
	if ! test -d "$blocks_dir"; then
		info_msg "Clonning blocks repo for remote mode..."
		git clone https://github.com/flojoy-ai/blocks.git "$blocks_dir" >/dev/null 2>&1
		blocks_registry_path="$HOME/.flojoy/blocks_path.txt"
		# register blocks path to blocks_path.txt file
		if [ -e "$blocks_registry_path" ]; then
			echo -n "$blocks_dir" >"$blocks_registry_path"
		else
			touch "$blocks_registry_path" && echo -n "$blocks_dir" >"$blocks_registry_path"
		fi
	else
		cd "$blocks_dir" || exit
		git stash
		git pull
	fi
else
	export DEPLOY_ENV=local
fi

cd "$CWD" || exit

# set deploy status to dev
export DEPLOY_STATUS=dev

# start project services
if [ $test_ci = true ]; then
	start_project_cmd='pnpm run start-project:ci'
else
	start_project_cmd='pnpm run start-project'
fi

if [ $isDebugMode = true ]; then
	info_msg "Debug mode will be enabled!"
	export FASTAPI_LOG=debug
else
	export FASTAPI_LOG=info
fi

$start_project_cmd
