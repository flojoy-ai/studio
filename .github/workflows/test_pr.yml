name: Trigger Live test

on:
  pull_request:
    types:
      - opened
      - synchronize
  pull_request_target:
    types:
      - closed

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_OWNER: flojoy-ai
  PROJECT_REPO: rc
  PROJECT_TOKEN: ${{ secrets.ACCESS_TOKEN_FLOJOY_RC }}
  REFLECT_SUITE: flojoy-live-test
  REFLECT_TOKEN: ${{ secrets.REFLECT_TOKEN }}

jobs:
  trigger_workflow:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [Windows, Linux]
    if: ${{ github.event.pull_request.base.ref == 'main' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Workflow ID
        run: |
          if [[ '${{ matrix.os }}' == 'Linux' ]]; then
            echo "PROJECT_WORKFLOW_ID=terraform-test-linux.yml" >> $GITHUB_ENV
          else
            echo "PROJECT_WORKFLOW_ID=terraform-test-win.yml" >> $GITHUB_ENV
          fi

      - name: Print Parameters
        run: |
          echo "GitHub Event Name: ${{ github.event_name}}"
          echo "GitHub Head Ref: ${{ github.head_ref }}"
          echo "GitHub Event Pull Request Number: ${{ github.event.pull_request.number }}"
          echo "Context Issue Number: ${{ github.event.pull_request.number}}"
          echo "Context Repo Owner: ${{ github.repository_owner }}"
          echo "Context Repo Repo: ${{ github.repository }}"
          echo "GitHub Event Pull Request Merged: ${{ github.event.pull_request.merged }}"
          echo "GitHub Event Action: ${{ github.event.action }}"

      - name: Trigger test PR
        id: trigger_pr
        run: |
          repo="${{env.PROJECT_OWNER}}/${{env.PROJECT_REPO}}"
          url="https://api.github.com/repos/$repo/actions/workflows/$PROJECT_WORKFLOW_ID/dispatches"
          curl -X POST "$url" \
            -H 'Accept: application/vnd.github.everest-preview+json' \
            -u ${{ env.PROJECT_TOKEN }} \
            --data '{"ref":"mahbub/test-branch", "inputs":{"github_event_name":"${{ github.event_name }}", "github_head_ref": "${{ github.head_ref }}", "github_event_pull_request_number": "${{ github.event.pull_request.number }}", "context_issue_number": "${{ github.event.pull_request.number }}", "context_repo_owner": "${{ github.repository_owner }}", "context_repo_repo": "${{ github.repository }}", "github_event_pull_request_merged": "${{ github.event.pull_request.merged }}", "github_event_action": "${{ github.event.action }}"}}'

      - name: Wait for 3m to get instance up
        run: sleep 3m

      - name: Find Comment with URLs
        if: github.event.action == 'opened' || github.event.action == 'synchronize'
        uses: peter-evans/find-comment@v2
        id: fc
        with:
          token: ${{ secrets.ACCESS_TOKEN_FLOJOY_RC }}
          issue-number: ${{ github.event.pull_request.number }}
          body-regex: "Access Flojoy-studio build from this pull request on ${{ matrix.os }}"

      - name: Extract test URLs
        if: github.event.action == 'opened' || github.event.action == 'synchronize'
        id: extract-ip-port
        run: |
          comment_body="${{ steps.fc.outputs.comment-body }}"
          extracted_url=$(echo "$comment_body" | grep -o 'http://[^:]*:5391' | head -n 1)
          if [[ -n "$extracted_url" ]]; then
            echo "FE_URL=$extracted_url" >> $GITHUB_OUTPUT
          else
            echo "Test url not found in the comment body!"
            exit 1
          fi

      - name: Test if flojoy-studio is up
        if: github.event.action == 'opened' || github.event.action == 'synchronize'
        run: |
          timeout_seconds=600 # 10m
          interval=30
          start_time=$(date +%s)
          studio_title="<title>Flojoy Studio</title>"

          while true; do
              current_time=$(date +%s)
              elapsed_time=$((current_time - start_time))
              if [[ $elapsed_time -ge $timeout_seconds ]]; then
                  echo "timeout reached!"
                  exit 1
              fi
              echo "Test on ${{ steps.extract-ip-port.outputs.FE_URL }}, elapsed time: $elapsed_time"
              set +e
              CONTENT=$(curl -s --max-time 10 "${{ steps.extract-ip-port.outputs.FE_URL }}")
              set -e
              if [[ $CONTENT == *"$studio_title"* ]]; then
                  echo "The HTTP page contains $studio_title."
                  echo "Test passed."
                  break
              else
                echo "Trying again in $interval seconds..."
              fi
              sleep $interval
          done

      # - name: Test if Flojou-studio is up
      #   if: github.event.action == 'opened' || github.event.action == 'synchronize'
      #   id: test-http-page
      #   run: |
      #     echo "Test on http://${{ steps.extract-ip-port.outputs.domain_windows }}:3000"
      #     CONTENT=$(curl -s "${{ steps.extract-ip-port.outputs.domain_windows }}:3000")
      #     if [[ $CONTENT == *"<title>FLOJOY</title>"* ]]; then
      #       echo "The HTTP page contains '<title>FLOJOY</title>'."
      #       echo "Test passed on Windows."
      #     else
      #       echo "The HTTP page does not contain '<title>FLOJOY</title>'."
      #       echo "Test failed on Windows."
      #       exit 1
      #     fi

      #     echo "Test on http://${{ steps.extract-ip-port.outputs.domain_linux }}:3000"
      #     CONTENT=$(curl -s "${{ steps.extract-ip-port.outputs.domain_linux }}:3000")
      #     if [[ $CONTENT == *"<title>FLOJOY</title>"* ]]; then
      #       echo "The HTTP page contains '<title>FLOJOY</title>'."
      #       echo "Test passed on Linux."
      #     else
      #       echo "The HTTP page does not contain '<title>FLOJOY</title>'."
      #       echo "Test failed on Linux."
      #       exit1
      #     fi

      - name: Live test on Reflect.run
        if: github.event.action == 'opened' || github.event.action == 'synchronize'
        run: |
          curl --location 'https://api.reflect.run/v1/suites/${{ env.REFLECT_SUITE }}/executions' \
          --header 'Content-Type: text/plain' \
          --header 'X-API-KEY: ${{ secrets.REFLECT_TOKEN }}' \
          --data '{
            "browser": "Chrome",
            "variables": {
              "URL": "${{ steps.extract-ip-port.outputs.FE_URL }}/"
            },
            "gitHub": {
                "owner": "${{ github.repository_owner }}",
                "repo": "${{ github.event.repository.name}}",
                "sha": "${{ github.event.pull_request.head.sha }}"
            }
          }'

      # - name: Linux live test on Reflect.run
      #   if: github.event.action == 'opened' || github.event.action == 'synchronize'
      #   run: |
      #     curl --location 'https://api.reflect.run/v1/suites/${{ env.REFLECT_SUITE }}/executions' \
      #     --header 'Content-Type: text/plain' \
      #     --header 'X-API-KEY: ${{ secrets.REFLECT_TOKEN }}' \
      #     --data '{
      #       "browser": "Chrome",
      #       "variables": {
      #         "URL": "http://${{ steps.extract-ip-port.outputs.domain_linux }}:3000/"
      #       },
      #       "gitHub": {
      #           "owner": "${{ github.repository_owner }}",
      #           "repo": "${{ github.event.repository.name}}",
      #           "sha": "${{ github.event.pull_request.head.sha }}"
      #       }
      #     }'
