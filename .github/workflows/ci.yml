name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop

env:
  PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
  DISPLAY: :0

jobs:
  code-style-check:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.base.ref == 'main' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Cache pnpm
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.6"

      - uses: actions/cache@v3
        name: Cache Poetry
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install Python Dependencies
        run: poetry install

      - name: Install Node Dependencies
        run: pnpm install

      - name: Black Prettier check
        run: pnpm run check

      - name: Typescript check
        run: pnpm exec tsc --noEmit

  python-tests:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.base.ref == 'main' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.6"

      - uses: actions/cache@v3
        name: Cache Poetry
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 18
      #
      # - uses: pnpm/action-setup@v2
      #   name: Install pnpm
      #   with:
      #     version: 8
      #     run_install: false
      #
      # - name: Get pnpm store directory
      #   shell: bash
      #   run: |
      #     echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      #
      # - uses: actions/cache@v3
      #   name: Setup pnpm cache
      #   with:
      #     path: ${{ env.STORE_PATH }}
      #     key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-store-

      - name: Install Python Dependencies
        run: poetry install

      # - name: Install Node Dependencies
      #   run: pnpm install

      - name: pytest
        run: |
          cd PYTHON
          poetry run python -m pytest --cov --cov-report=xml --ignore=nodes
          cd ..
          cd captain
          poetry run python -m pytest --cov --cov-report=xml --ignore=nodes

      - name: Codecov report
        uses: codecov/codecov-action@v3
        with:
          flags: python

  visual-tests:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.base.ref == 'main' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Setup Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: "1.6"

      - uses: actions/cache@v3
        name: Cache Poetry
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Run Flojoy startup script
        run: bash flojoy -c

      # In certain Linux environments, you may experience connection errors with your X11 server. In this case, we may need to start Xvfb with the following command.
      # This is necessary to avoid using 8-bit color depth with Xvfb, which will prevent Chrome or Electron from crashing.
      # https://docs.cypress.io/guides/continuous-integration/introduction#Xvfb
      - name: X server
        run: Xvfb -screen 0 1024x768x24 :0 &

      - name: Run e2e test
        uses: cypress-io/github-action@v4
        with:
          build: pnpm run build
          start: pnpm run start-project
          command: pnpm exec percy exec -- cypress run
          browser: chrome
          install: false

      - name: Codecov report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage-cy/coverage-final.json
          flags: cypress
