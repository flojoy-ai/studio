{
  "docstring": {
    "long_description": "The description of that function is as follows:\n\n    Compute the qr factorization of a matrix.\n\n    Factor the matrix 'a' as *qr*, where 'q' is orthonormal and 'r' is upper-triangular.\n\nFor the 'mode' parameters, the options 'reduced', 'complete, and 'raw' are new in numpy 1.8 (see the notes for more information).\nThe default is 'reduced', and to maintain backward compatibility with earlier versions of numpy, both it and the old default 'full' can be omitted.\nNote that array h returned in 'raw' mode is transposed for calling Fortran.\nThe 'economic' mode is deprecated.\nThe modes 'full' and 'economic' may be passed using only the first letter for backwards compatibility,\nbut all others must be spelled out (see the Notes for further explanation).",
    "short_description": "The QR node is based on a numpy or scipy function.",
    "parameters": [
      {
        "name": "select_return",
        "type": "'q', 'r', '(h, tau)'",
        "description": "Select the desired opject to return.\nSee the respective function docs for descriptors."
      },
      {
        "name": "a",
        "type": "array_like, shape (..., M, N)",
        "description": "An array-like object with the dimensionality of at least 2."
      },
      {
        "name": "mode",
        "type": "{'reduced', 'complete', 'r', 'raw'}",
        "description": "If K = min(M, N), then:\n    'reduced' : returns q, r with dimensions (..., M, K), (..., K, N) (default)\n    'complete' : returns q, r with dimensions (..., M, M), (..., M, N)\n    'r' : returns r only with dimensions (..., K, N)\n    'raw' : returns h, tau with dimensions (..., N, M), (..., K,)"
      }
    ],
    "returns": [
      {
        "name": null,
        "type": "DataContainer",
        "description": "type 'ordered pair', 'scalar', or 'matrix'"
      }
    ]
  }
}