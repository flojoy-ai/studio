{
  "docstring": {
    "long_description": "The ability to find local peaks will not depend on the extrema being\nexponentially separated from the neighboring values, or some other restrictive constraint.\n\nWe implement three algorithms to find the local max. The first algorithm uses a masked phase\ncross correlation technique [1], while the second uses the persistence birth/death algorithms [2, 3].\nThe original implementations of these libraries were utilized for the detection of elastic\nscattering peaks in diffraction data, found in the 'scikit-ued' library of Python [4].\n\nNote that the algorithm assumes that the extrema are symmetrically distributed around\na center point. All extrema are determined relative to the center position.\nAlso, for closely spaced points, noisy data, or data that has a very high dynamic range, the\nalgorithm fails. Therefore, this approach is suited only for images with\nhigh degrees of symmetry and reasonable contrast.\n\nTherefore, we also use the second prominence algorithm, where a single\nvalue is applied locally to determine the relative 'peakiness' of a given pixel,\ninspecting only the neighbors around that given pixel. While computationally\nmore intense for images with a resolution of >4K, it produces extremely accurate\nresults for the correct value of prominence in potentially low-contrast images.\nBy definition, it is a local pixel algorithm, and therefore does not perform any blob detection,\nunlike the high-symmetry algorithm which creates high contrast in\nthe image with laplacian filtering, and identifies regions of this high contrast image.\n\nNote, however, that the persistence algorithm tends to find more points than what are actually there.\nFor images with high frequency components (i.e. quickly varying values among the third nearest neighbours),\nthe algorithm will tend to identify each as a 'peak', even though the local maxima is elsewhere. This\ntherefore assumes that the image has been properly preprocessed with another image processing node to\nprovide a sufficient low-frequency image such that the prominence of each pixel is well defined.\n\nTo combat this limitation, we present the most robust of the algorithms that should work on images\nof low or high contrast, low or high frequency components, and of low or high dynamic range. It is\ncomputationally more expensive, as it involves repeated convolutions of the image, but it is\nthe most reliable of the methods for a general image.\n\nThis routine is known as the Laplacian of Gaussian algorithm [5].\nThe key to this algorithm is to apply a filter specially chosen such that regions around peaks have high\nlevels of contrast (essentially binarize the image around its peak so that near the peak, the\nimage is one, and zero otherwise). To achieve such a filter, the Laplacian of a Gaussian is used:\n\n.. math:: \\nabla^2 L \\equiv L_{xx} + L_{yy}\n\nwhich yields the following filter (for a Gaussian of width sigma, centered at the origin):\n\n..math :: LG = -\\frac{1}{\\pi\\sigma^4}\\big[1-\\frac{x^2+y^2}{2\\sigma^2}\\big]e^{-\\frac{x^2+y^2}{2\\sigma^2}}\n\nThe output of this filter will be a maximum where there is an edge from a peak, the maximum response\nof which is given for 1.41*'blob radius' around the peak.\nApplying this filter repeatedly with varying degrees of sigma, will continue to refine the edges around\nthe peak until the image is essentially binarized around the peaks. Due to the repeated convolutions,\nthis algorithm is generally expensive, but specific methods have been implemented using FFT to speed\nup these calculations.",
    "short_description": "Determine the peak in an image.",
    "parameters": [
      {
        "name": "default",
        "type": "Image | Grayscale | Matrix",
        "description": "The input DataContainer that contains the image to be processed.\nCan either be RGBA, greyscale, or a matrix type.\nIn the case of RGB(A), the image is flattened to grayscale for the peak detection."
      },
      {
        "name": "image_mask",
        "type": "Grayscale | Matrix",
        "description": "This object provides a mask to apply to the peak finding routines.\nPeaks found by any algorithm inside this mask are ignored.\nShould be of a datatype that can be static cast to booleans.\nIf none, it is assumed that the entire image is valid for peak detection."
      },
      {
        "name": "center",
        "type": "list[int]",
        "description": "For the high symmetry algorithm, this provides the center of symmetry\nto pass to the cross correlation routines.\nIf none is provided, an autocenter routine is run to attempt to find the center of symmetry."
      },
      {
        "name": "min_dist",
        "type": "float",
        "description": "The minimum distance between peaks.\nIf the L2 distance (in pixels) of any pair of peaks is less than min_dist,\nthey are considered to be the same, and one is discarded.\nThis parameter applies to all algorithms."
      },
      {
        "name": "algorithm",
        "type": "str",
        "description": "The name of the algorithm to use."
      },
      {
        "name": "prominence",
        "type": "float",
        "description": "In the prominence and Laplacian of Gaussian algorithms, this defines the threshold\nabove or below which objects must pass in order to be considered a peak.\nDoes not apply to the high_symmetry algorithm."
      },
      {
        "name": "k",
        "type": "float",
        "description": "This specifies the scaling of Gaussian filters between successive applications\nof Gaussian filters of increasing sigma.\nDefault is chosen for ideal spherically symmetric peaks.\nCan be tuned for more bizarre looking peak structures.\nApplies only to the Laplacian of Gaussian algorithm."
      },
      {
        "name": "sigma",
        "type": "float",
        "description": "The baseline standard deviation of the Gaussian filters,\nonly for the Laplacian of Gaussian algorithm."
      },
      {
        "name": "max_power",
        "type": "int",
        "description": "Describes the upper limit of the degree of exponentiation for the successive\napplication of filters, only in the Laplacian of Gaussian algorithm."
      }
    ],
    "returns": [
      {
        "name": "fig",
        "type": "Plotly",
        "description": "The Plotly figure so that the image can be visualized with its found peaks."
      },
      {
        "name": "blobs",
        "type": "Grayscale",
        "description": "A blob mask that returns the regions around the found peaks.\nIt is only valid for the high_symmetry and log routines.\nAs the persistence algorithm is by definition hyperlocal, it has no notion of blobs\nthroughout the detection process, and as such returns a unity mask."
      }
    ]
  }
}