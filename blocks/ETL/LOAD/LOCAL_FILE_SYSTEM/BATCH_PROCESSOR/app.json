{
    "rfInstance": {
        "nodes": [
            {
                "id": "LOOP-4799dd2e-808c-4110-b0f7-0eaf4b32695a",
                "type": "CONTROL_FLOW",
                "data": {
                    "id": "LOOP-4799dd2e-808c-4110-b0f7-0eaf4b32695a",
                    "label": "LOOP",
                    "func": "LOOP",
                    "type": "CONTROL_FLOW",
                    "ctrls": {
                        "num_loops": {
                            "type": "int",
                            "default": -1,
                            "desc": "number of times to iterate through body nodes, default is \"-1\" meaning infinity.",
                            "overload": null,
                            "functionName": "LOOP",
                            "param": "num_loops",
                            "value": -1
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "body",
                            "id": "body",
                            "type": "Any",
                            "desc": "Forwards the input DataContainer to the body."
                        },
                        {
                            "name": "end",
                            "id": "end",
                            "type": "Any",
                            "desc": "Forwards the input DataContainer to the end."
                        }
                    ],
                    "path": "CONTROL_FLOW/LOOPS/LOOP/LOOP.py"
                },
                "position": {
                    "x": -774.3292761834521,
                    "y": 899.7143792911088
                },
                "width": 236,
                "height": 198,
                "selected": false,
                "positionAbsolute": {
                    "x": -774.3292761834521,
                    "y": 899.7143792911088
                },
                "dragging": false
            },
            {
                "id": "CONSTANT-d08387ec-35ba-4dca-86ef-c1921d203a66",
                "type": "DATA",
                "data": {
                    "id": "CONSTANT-d08387ec-35ba-4dca-86ef-c1921d203a66",
                    "label": "1",
                    "func": "CONSTANT",
                    "type": "DATA",
                    "ctrls": {
                        "dc_type": {
                            "type": "select",
                            "default": "OrderedPair",
                            "options": [
                                "Scalar",
                                "Vector",
                                "OrderedPair"
                            ],
                            "desc": "The type of DataContainer to return.",
                            "overload": null,
                            "functionName": "CONSTANT",
                            "param": "dc_type",
                            "value": "Scalar"
                        },
                        "constant": {
                            "type": "float",
                            "default": 3,
                            "desc": "The value of the y axis output.",
                            "overload": null,
                            "functionName": "CONSTANT",
                            "param": "constant",
                            "value": 1
                        },
                        "step": {
                            "type": "float",
                            "default": 1000,
                            "desc": "The size of the y and x axes.",
                            "overload": null,
                            "functionName": "CONSTANT",
                            "param": "step",
                            "value": 1
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Vector|OrderedPair",
                            "desc": "Optional input that defines the size of the output.",
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "OrderedPair|Vector|Scalar",
                            "desc": "OrderedPair if selected\nx: the x axis generated with size 'step'\ny: the resulting constant with size 'step'\nVector if selected\nv: the resulting constant with size 'step'\nScalar if selected\nc: the resulting constant"
                        }
                    ],
                    "path": "DATA/GENERATION/SIMULATIONS/CONSTANT/CONSTANT.py"
                },
                "position": {
                    "x": -302.0508711755609,
                    "y": 878.1427090902848
                },
                "width": 216,
                "height": 197,
                "selected": false,
                "positionAbsolute": {
                    "x": -302.0508711755609,
                    "y": 878.1427090902848
                },
                "dragging": false
            },
            {
                "id": "CONSTANT-277fcb9c-0fa9-49f1-b206-7e0ce4ae82b6",
                "type": "DATA",
                "data": {
                    "id": "CONSTANT-277fcb9c-0fa9-49f1-b206-7e0ce4ae82b6",
                    "label": "1",
                    "func": "CONSTANT",
                    "type": "DATA",
                    "ctrls": {
                        "dc_type": {
                            "type": "select",
                            "default": "OrderedPair",
                            "options": [
                                "Scalar",
                                "Vector",
                                "OrderedPair"
                            ],
                            "desc": "The type of DataContainer to return.",
                            "overload": null,
                            "functionName": "CONSTANT",
                            "param": "dc_type",
                            "value": "Scalar"
                        },
                        "constant": {
                            "type": "float",
                            "default": 3,
                            "desc": "The value of the y axis output.",
                            "overload": null,
                            "functionName": "CONSTANT",
                            "param": "constant",
                            "value": 1
                        },
                        "step": {
                            "type": "float",
                            "default": 1000,
                            "desc": "The size of the y and x axes.",
                            "overload": null,
                            "functionName": "CONSTANT",
                            "param": "step",
                            "value": 1
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Vector|OrderedPair",
                            "desc": "Optional input that defines the size of the output.",
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "OrderedPair|Vector|Scalar",
                            "desc": "OrderedPair if selected\nx: the x axis generated with size 'step'\ny: the resulting constant with size 'step'\nVector if selected\nv: the resulting constant with size 'step'\nScalar if selected\nc: the resulting constant"
                        }
                    ],
                    "path": "DATA/GENERATION/SIMULATIONS/CONSTANT/CONSTANT.py"
                },
                "position": {
                    "x": -424.22552382792514,
                    "y": 674.065239027322
                },
                "width": 216,
                "height": 197,
                "selected": false,
                "positionAbsolute": {
                    "x": -424.22552382792514,
                    "y": 674.065239027322
                },
                "dragging": false
            },
            {
                "id": "TEXT-8c7eca61-dd2d-4141-875e-87ec4e5d51c8",
                "type": "DATA",
                "data": {
                    "id": "TEXT-8c7eca61-dd2d-4141-875e-87ec4e5d51c8",
                    "label": "TEXT",
                    "func": "TEXT",
                    "type": "DATA",
                    "ctrls": {
                        "value": {
                            "type": "TextArea",
                            "default": "Hello World!",
                            "desc": "The value set in Parameters.",
                            "overload": null,
                            "functionName": "TEXT",
                            "param": "value",
                            "value": "Hello World!"
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "_",
                            "id": "_",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "String",
                            "desc": "Return the value being set in Parameters."
                        }
                    ],
                    "path": "DATA/GENERATION/SIMULATIONS/TEXT/TEXT.py"
                },
                "position": {
                    "x": -464.0272734675988,
                    "y": 1160.9965095957214
                },
                "width": 216,
                "height": 197,
                "selected": false,
                "positionAbsolute": {
                    "x": -464.0272734675988,
                    "y": 1160.9965095957214
                },
                "dragging": false
            },
            {
                "id": "TEXT-6d844c0a-d958-4200-9304-bf15c1fcf0f4",
                "type": "DATA",
                "data": {
                    "id": "TEXT-6d844c0a-d958-4200-9304-bf15c1fcf0f4",
                    "label": "TEXT 1",
                    "func": "TEXT",
                    "type": "DATA",
                    "ctrls": {
                        "value": {
                            "type": "TextArea",
                            "default": "Hello World!",
                            "desc": "The value set in Parameters.",
                            "overload": null,
                            "functionName": "TEXT",
                            "param": "value",
                            "value": "Hello World!"
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "_",
                            "id": "_",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "String",
                            "desc": "Return the value being set in Parameters."
                        }
                    ],
                    "path": "DATA/GENERATION/SIMULATIONS/TEXT/TEXT.py"
                },
                "position": {
                    "x": 24.16608260090061,
                    "y": 1107.2008134987161
                },
                "width": 216,
                "height": 197,
                "selected": false,
                "positionAbsolute": {
                    "x": 24.16608260090061,
                    "y": 1107.2008134987161
                },
                "dragging": false
            },
            {
                "id": "TEXT_VIEW-754f069a-4287-4814-aabf-7504254929af",
                "type": "VISUALIZATION",
                "data": {
                    "id": "TEXT_VIEW-754f069a-4287-4814-aabf-7504254929af",
                    "label": "TEXT VIEW",
                    "func": "TEXT_VIEW",
                    "type": "VISUALIZATION",
                    "ctrls": {
                        "prettify": {
                            "type": "bool",
                            "default": false,
                            "desc": "Whether to prettify the displayed text (defaults to True)",
                            "overload": null,
                            "functionName": "TEXT_VIEW",
                            "param": "prettify",
                            "value": false
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "String|Boolean",
                            "desc": "The DataContainer to be visualized in text format",
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "String",
                            "desc": "The DataContainer containing text data"
                        }
                    ],
                    "path": "DATA/VISUALIZATION/DATA_STRUCTURE/TEXT_VIEW/TEXT_VIEW.py"
                },
                "position": {
                    "x": 400.7875836945816,
                    "y": 1297.1123074152713
                },
                "width": 225,
                "height": 225,
                "selected": false,
                "positionAbsolute": {
                    "x": 400.7875836945816,
                    "y": 1297.1123074152713
                },
                "dragging": false
            },
            {
                "id": "TEXT_VIEW-e4c44264-4164-41ef-9999-0df8a03d4631",
                "type": "VISUALIZATION",
                "data": {
                    "id": "TEXT_VIEW-e4c44264-4164-41ef-9999-0df8a03d4631",
                    "label": "TEXT VIEW 1",
                    "func": "TEXT_VIEW",
                    "type": "VISUALIZATION",
                    "ctrls": {
                        "prettify": {
                            "type": "bool",
                            "default": false,
                            "desc": "Whether to prettify the displayed text (defaults to True)",
                            "overload": null,
                            "functionName": "TEXT_VIEW",
                            "param": "prettify",
                            "value": false
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "String|Boolean",
                            "desc": "The DataContainer to be visualized in text format",
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "String",
                            "desc": "The DataContainer containing text data"
                        }
                    ],
                    "path": "DATA/VISUALIZATION/DATA_STRUCTURE/TEXT_VIEW/TEXT_VIEW.py"
                },
                "position": {
                    "x": -144.68945223706385,
                    "y": 1303.687076891866
                },
                "width": 225,
                "height": 225,
                "selected": false,
                "positionAbsolute": {
                    "x": -144.68945223706385,
                    "y": 1303.687076891866
                },
                "dragging": false
            },
            {
                "id": "FEEDBACK-7cc13e0e-79a7-4284-be50-02c538569825",
                "type": "DATA",
                "data": {
                    "id": "FEEDBACK-7cc13e0e-79a7-4284-be50-02c538569825",
                    "label": "ITERATOR",
                    "func": "FEEDBACK",
                    "type": "DATA",
                    "ctrls": {
                        "referred_node": {
                            "type": "NodeReference",
                            "default": null,
                            "desc": "The node ID to capture the result from.",
                            "overload": null,
                            "functionName": "FEEDBACK",
                            "param": "referred_node",
                            "value": ""
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": "The result of the specified node ID, or the result of the parent node if it was not found."
                        }
                    ],
                    "path": "DATA/GENERATION/SIMULATIONS/FEEDBACK/FEEDBACK.py"
                },
                "position": {
                    "x": 55.42477533566159,
                    "y": 883.9143988289566
                },
                "width": 216,
                "height": 197,
                "selected": false,
                "positionAbsolute": {
                    "x": 55.42477533566159,
                    "y": 883.9143988289566
                },
                "dragging": false
            },
            {
                "id": "ADD-1ccadbd0-3361-44eb-9bfc-7785fe03cde3",
                "type": "MATH",
                "data": {
                    "id": "ADD-1ccadbd0-3361-44eb-9bfc-7785fe03cde3",
                    "label": "ADD",
                    "func": "ADD",
                    "type": "MATH",
                    "ctrls": {},
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "a",
                            "id": "a",
                            "type": "OrderedPair|Scalar|Vector",
                            "desc": "The input a use to compute the sum of a and b.",
                            "multiple": false
                        },
                        {
                            "name": "b",
                            "id": "b",
                            "type": "OrderedPair|Scalar|Vector",
                            "desc": "The input b use to compute the sum of a and b.",
                            "multiple": true
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "OrderedPair|Scalar|Vector",
                            "desc": "OrderedPair if a is an OrderedPair.\nx: the x-axis of input a.\ny: the sum of input a and input b.\n\nScalar if a is a Scalar.\nc: the sum of input a and input b.\n\nVector if a is a Vector.\nv: the sum of input a and input b."
                        }
                    ],
                    "path": "MATH/ARITHMETIC/ADD/ADD.py"
                },
                "position": {
                    "x": 492.47242094623994,
                    "y": 701.7576692023147
                },
                "width": 216,
                "height": 198,
                "selected": false,
                "positionAbsolute": {
                    "x": 492.47242094623994,
                    "y": 701.7576692023147
                },
                "dragging": false
            },
            {
                "id": "BATCH_PROCESSOR-f3677952-0247-499c-9cb6-23cdeb358a1d",
                "type": "LOAD",
                "data": {
                    "id": "BATCH_PROCESSOR-f3677952-0247-499c-9cb6-23cdeb358a1d",
                    "label": "#FILES IDENTIFIER",
                    "func": "BATCH_PROCESSOR",
                    "type": "LOAD",
                    "ctrls": {
                        "directory_path": {
                            "type": "str",
                            "default": null,
                            "desc": "The directory in which we should match the pattern to find the files.",
                            "overload": null,
                            "functionName": "BATCH_PROCESSOR",
                            "param": "directory_path",
                            "value": "ETL/LOAD/LOCAL_FILE_SYSTEM/BATCH_PROCESSOR/assets"
                        },
                        "pattern": {
                            "type": "str",
                            "default": "",
                            "desc": "The glob pattern to match.\nIf not provided, all files in the directory are returned.\nThe current implementation supports recursion and double wildcard matching.",
                            "overload": null,
                            "functionName": "BATCH_PROCESSOR",
                            "param": "pattern",
                            "value": "*.tif"
                        },
                        "refresh": {
                            "type": "bool",
                            "default": true,
                            "desc": "A switching parameter that refreshes the cache of files. If a separate\nprogramme is expected to continuously write new files of interest to the\ndirectory, this flag will enable the update of the new files for processing.",
                            "overload": null,
                            "functionName": "BATCH_PROCESSOR",
                            "param": "refresh",
                            "value": true
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "current_iteration",
                            "id": "current_iteration",
                            "type": "Scalar",
                            "desc": "This is the input from the LOOP_INDEX node that determines\nwhether we need to initialize this routine or not.",
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "fname",
                            "id": "fname",
                            "type": "String",
                            "desc": "The file name on the current iteration."
                        },
                        {
                            "name": "n_files",
                            "id": "n_files",
                            "type": "Scalar",
                            "desc": "The total number of files matched by the pattern in the given directory."
                        }
                    ],
                    "path": "ETL/LOAD/LOCAL_FILE_SYSTEM/BATCH_PROCESSOR/BATCH_PROCESSOR.py"
                },
                "position": {
                    "x": -54.91013750720367,
                    "y": 511.0549677655712
                },
                "width": 218,
                "height": 234,
                "selected": false,
                "positionAbsolute": {
                    "x": -54.91013750720367,
                    "y": 511.0549677655712
                },
                "dragging": false
            },
            {
                "id": "TEXT-3ea8c0f2-8081-489a-bf09-5c60e142a429",
                "type": "DATA",
                "data": {
                    "id": "TEXT-3ea8c0f2-8081-489a-bf09-5c60e142a429",
                    "label": "TEXT 2",
                    "func": "TEXT",
                    "type": "DATA",
                    "ctrls": {
                        "value": {
                            "type": "TextArea",
                            "default": "Hello World!",
                            "desc": "The value set in Parameters.",
                            "overload": null,
                            "functionName": "TEXT",
                            "param": "value",
                            "value": "Hello World!"
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "_",
                            "id": "_",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "String",
                            "desc": "Return the value being set in Parameters."
                        }
                    ],
                    "path": "DATA/GENERATION/SIMULATIONS/TEXT/TEXT.py"
                },
                "position": {
                    "x": -54.75401595774724,
                    "y": 303.4196175982331
                },
                "width": 216,
                "height": 197,
                "selected": false,
                "positionAbsolute": {
                    "x": -54.75401595774724,
                    "y": 303.4196175982331
                },
                "dragging": false
            },
            {
                "id": "TEXT_VIEW-e90aef26-4991-4468-94b9-bb5afba06e49",
                "type": "VISUALIZATION",
                "data": {
                    "id": "TEXT_VIEW-e90aef26-4991-4468-94b9-bb5afba06e49",
                    "label": "TEXT VIEW 2",
                    "func": "TEXT_VIEW",
                    "type": "VISUALIZATION",
                    "ctrls": {
                        "prettify": {
                            "type": "bool",
                            "default": false,
                            "desc": "Whether to prettify the displayed text (defaults to True)",
                            "overload": null,
                            "functionName": "TEXT_VIEW",
                            "param": "prettify",
                            "value": false
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "String|Boolean",
                            "desc": "The DataContainer to be visualized in text format",
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "String",
                            "desc": "The DataContainer containing text data"
                        }
                    ],
                    "path": "DATA/VISUALIZATION/DATA_STRUCTURE/TEXT_VIEW/TEXT_VIEW.py"
                },
                "position": {
                    "x": 421.19631842435206,
                    "y": 274.6042188443937
                },
                "width": 225,
                "height": 225,
                "selected": false,
                "positionAbsolute": {
                    "x": 421.19631842435206,
                    "y": 274.6042188443937
                },
                "dragging": false
            },
            {
                "id": "CONDITIONAL-1bb1c29c-65ef-4cf1-a6ba-8a055ce59446",
                "type": "CONDITIONALS",
                "data": {
                    "id": "CONDITIONAL-1bb1c29c-65ef-4cf1-a6ba-8a055ce59446",
                    "label": "CONDITIONAL",
                    "func": "CONDITIONAL",
                    "type": "CONDITIONALS",
                    "ctrls": {
                        "operator_type": {
                            "type": "select",
                            "default": ">=",
                            "options": [
                                "<=",
                                ">",
                                "<",
                                ">=",
                                "!=",
                                "=="
                            ],
                            "desc": "Specifies the type of comparison to be performed between the two inputs. The default value is \">=\".",
                            "overload": null,
                            "functionName": "CONDITIONAL",
                            "param": "operator_type",
                            "value": ">="
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "x",
                            "id": "x",
                            "type": "Scalar",
                            "desc": null,
                            "multiple": false
                        },
                        {
                            "name": "y",
                            "id": "y",
                            "type": "Scalar",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "true",
                            "id": "true",
                            "type": "Any",
                            "desc": "Forwards the first value to the true branch."
                        },
                        {
                            "name": "false",
                            "id": "false",
                            "type": "Any",
                            "desc": null
                        }
                    ],
                    "path": "CONTROL_FLOW/CONDITIONALS/CONDITIONAL/CONDITIONAL.py"
                },
                "position": {
                    "x": 712.8252799145591,
                    "y": 916.4337519566202
                },
                "width": 239,
                "height": 198,
                "selected": false,
                "positionAbsolute": {
                    "x": 712.8252799145591,
                    "y": 916.4337519566202
                },
                "dragging": false
            },
            {
                "id": "BREAK-c8f58dea-991a-425e-8057-ffcf3f389d43",
                "type": "CONTROL_FLOW",
                "data": {
                    "id": "BREAK-c8f58dea-991a-425e-8057-ffcf3f389d43",
                    "label": "BREAK",
                    "func": "BREAK",
                    "type": "CONTROL_FLOW",
                    "ctrls": {
                        "referred_node": {
                            "type": "NodeReference",
                            "default": null,
                            "desc": "This is the specific instance of a LOOP node that you want to break.\nIt is required to differentiate between multiple LOOPs if they exist\nin the same application.",
                            "overload": null,
                            "functionName": "BREAK",
                            "param": "referred_node",
                            "value": ""
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": "This node simply requires an input (most likely from\nthe return of a CONDITIONAL node) so that it is executed.",
                            "multiple": false
                        }
                    ],
                    "path": "CONTROL_FLOW/LOOP_TOOLS/BREAK/BREAK.py"
                },
                "position": {
                    "x": 1092.8450784018396,
                    "y": 1373.8820023794601
                },
                "width": 236,
                "height": 140,
                "selected": false,
                "positionAbsolute": {
                    "x": 1092.8450784018396,
                    "y": 1373.8820023794601
                },
                "dragging": false
            },
            {
                "id": "FEEDBACK-38e32f8e-1f97-410a-b55e-8db36b8fabfd",
                "type": "DATA",
                "data": {
                    "id": "FEEDBACK-38e32f8e-1f97-410a-b55e-8db36b8fabfd",
                    "label": "CURRENT ITERATOR VALUE",
                    "func": "FEEDBACK",
                    "type": "DATA",
                    "ctrls": {
                        "referred_node": {
                            "type": "NodeReference",
                            "default": null,
                            "desc": "The node ID to capture the result from.",
                            "overload": null,
                            "functionName": "FEEDBACK",
                            "param": "referred_node",
                            "value": ""
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": "The result of the specified node ID, or the result of the parent node if it was not found."
                        }
                    ],
                    "path": "DATA/GENERATION/SIMULATIONS/FEEDBACK/FEEDBACK.py"
                },
                "position": {
                    "x": 1018.6853253194045,
                    "y": 898.2362250275432
                },
                "width": 216,
                "height": 269,
                "selected": false,
                "positionAbsolute": {
                    "x": 1018.6853253194045,
                    "y": 898.2362250275432
                },
                "dragging": false
            },
            {
                "id": "BIG_NUMBER-a7a0214a-4266-408d-a089-0c57579332cb",
                "type": "VISUALIZATION",
                "data": {
                    "id": "BIG_NUMBER-a7a0214a-4266-408d-a089-0c57579332cb",
                    "label": "BIG NUMBER",
                    "func": "BIG_NUMBER",
                    "type": "VISUALIZATION",
                    "ctrls": {
                        "suffix": {
                            "type": "str",
                            "default": null,
                            "desc": "any suffix to show with big number",
                            "overload": null,
                            "functionName": "BIG_NUMBER",
                            "param": "suffix",
                            "value": ""
                        },
                        "prefix": {
                            "type": "str",
                            "default": null,
                            "desc": "any prefix to show with big number",
                            "overload": null,
                            "functionName": "BIG_NUMBER",
                            "param": "prefix",
                            "value": ""
                        },
                        "title": {
                            "type": "str",
                            "default": null,
                            "desc": "title of the plot, default = \"BIG_NUMBER\"",
                            "overload": null,
                            "functionName": "BIG_NUMBER",
                            "param": "title",
                            "value": ""
                        },
                        "dec_places": {
                            "type": "int",
                            "default": 0,
                            "desc": "Number of decimal places. Use 0 to not round. default = \"BIG_NUMBER\"",
                            "overload": null,
                            "functionName": "BIG_NUMBER",
                            "param": "dec_places",
                            "value": 0
                        },
                        "relative_delta": {
                            "type": "bool",
                            "default": true,
                            "desc": "whether or not to show the relative delta from the last run along with big number",
                            "overload": null,
                            "functionName": "BIG_NUMBER",
                            "param": "relative_delta",
                            "value": true
                        },
                        "scientific_notation": {
                            "type": "bool",
                            "default": false,
                            "desc": "Use scientific notation? Defaults to 4 decimal places.",
                            "overload": null,
                            "functionName": "BIG_NUMBER",
                            "param": "scientific_notation",
                            "value": false
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "OrderedPair|Scalar|Vector",
                            "desc": "the DataContainer to be visualized",
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Plotly",
                            "desc": "the DataContainer containing the Plotly big number visualization"
                        }
                    ],
                    "path": "DATA/VISUALIZATION/PLOTLY/BIG_NUMBER/BIG_NUMBER.py"
                },
                "position": {
                    "x": 1414.7691933985698,
                    "y": 500.51399185559876
                },
                "width": 225,
                "height": 225,
                "selected": false,
                "positionAbsolute": {
                    "x": 1414.7691933985698,
                    "y": 500.51399185559876
                },
                "dragging": false
            },
            {
                "id": "BATCH_PROCESSOR-88d4def0-9e63-4ab5-84f4-50f89670055f",
                "type": "LOAD",
                "data": {
                    "id": "BATCH_PROCESSOR-88d4def0-9e63-4ab5-84f4-50f89670055f",
                    "label": "BATCH PROCESSOR",
                    "func": "BATCH_PROCESSOR",
                    "type": "LOAD",
                    "ctrls": {
                        "directory_path": {
                            "type": "str",
                            "default": null,
                            "desc": "The directory in which we should match the pattern to find the files.",
                            "overload": null,
                            "functionName": "BATCH_PROCESSOR",
                            "param": "directory_path",
                            "value": "ETL/LOAD/LOCAL_FILE_SYSTEM/BATCH_PROCESSOR/assets"
                        },
                        "pattern": {
                            "type": "str",
                            "default": "",
                            "desc": "The glob pattern to match.\nIf not provided, all files in the directory are returned.\nThe current implementation supports recursion and double wildcard matching.",
                            "overload": null,
                            "functionName": "BATCH_PROCESSOR",
                            "param": "pattern",
                            "value": "*.tif"
                        },
                        "refresh": {
                            "type": "bool",
                            "default": true,
                            "desc": "A switching parameter that refreshes the cache of files. If a separate\nprogramme is expected to continuously write new files of interest to the\ndirectory, this flag will enable the update of the new files for processing.",
                            "overload": null,
                            "functionName": "BATCH_PROCESSOR",
                            "param": "refresh",
                            "value": true
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "current_iteration",
                            "id": "current_iteration",
                            "type": "Scalar",
                            "desc": "This is the input from the LOOP_INDEX node that determines\nwhether we need to initialize this routine or not.",
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "fname",
                            "id": "fname",
                            "type": "String",
                            "desc": "The file name on the current iteration."
                        },
                        {
                            "name": "n_files",
                            "id": "n_files",
                            "type": "Scalar",
                            "desc": "The total number of files matched by the pattern in the given directory."
                        }
                    ],
                    "path": "ETL/LOAD/LOCAL_FILE_SYSTEM/BATCH_PROCESSOR/BATCH_PROCESSOR.py"
                },
                "position": {
                    "x": 1429.8240458391956,
                    "y": 898.79933892937
                },
                "width": 216,
                "height": 234,
                "selected": false,
                "positionAbsolute": {
                    "x": 1429.8240458391956,
                    "y": 898.79933892937
                },
                "dragging": false
            },
            {
                "id": "LOCAL_FILE-0036b1aa-b83a-474b-8a31-54dcbc89d4b1",
                "type": "LOAD",
                "data": {
                    "id": "LOCAL_FILE-0036b1aa-b83a-474b-8a31-54dcbc89d4b1",
                    "label": "LOCAL FILE",
                    "func": "LOCAL_FILE",
                    "type": "LOAD",
                    "ctrls": {
                        "file_path": {
                            "type": "str",
                            "default": null,
                            "desc": "The path to the file to be loaded. This can be either an absolute path or\na path relative to the \"nodes\" directory.",
                            "overload": null,
                            "functionName": "LOCAL_FILE",
                            "param": "file_path",
                            "value": ""
                        },
                        "file_type": {
                            "type": "select",
                            "default": "Image",
                            "options": [
                                "Image",
                                "Grayscale",
                                "JSON",
                                "CSV"
                            ],
                            "desc": "Type of file to load, default = image.\nIf both 'file_path' and 'default' are not specified when 'file_type=\"Image\"',\na default image will be loaded.\nIf the file path is not specified and the default input is not connected,\na ValueError is raised.",
                            "overload": null,
                            "functionName": "LOCAL_FILE",
                            "param": "file_type",
                            "value": "Grayscale"
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "String",
                            "desc": "If this input node is connected, the file name will be taken from\nthe output of the connected node.\nTo be used in conjunction with batch processing.",
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Image|DataFrame|Grayscale",
                            "desc": "Image for file_type 'image'.\nGrayscale from file_type 'Grayscale'.\nDataFrame for file_type 'json', 'csv'."
                        }
                    ],
                    "pip_dependencies": [
                        {
                            "name": "scikit-image",
                            "v": "0.21.0"
                        }
                    ],
                    "path": "ETL/LOAD/LOCAL_FILE_SYSTEM/LOCAL_FILE/LOCAL_FILE.py"
                },
                "position": {
                    "x": 1819.1964487671355,
                    "y": 882.9960504752447
                },
                "width": 216,
                "height": 188,
                "selected": false,
                "positionAbsolute": {
                    "x": 1819.1964487671355,
                    "y": 882.9960504752447
                },
                "dragging": false
            },
            {
                "id": "IMAGE-b93b361c-80e0-459f-badd-656b86975e88",
                "type": "VISUALIZATION",
                "data": {
                    "id": "IMAGE-b93b361c-80e0-459f-badd-656b86975e88",
                    "label": "IMAGE",
                    "func": "IMAGE",
                    "type": "VISUALIZATION",
                    "ctrls": {},
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Image|Grayscale",
                            "desc": "the DataContainer to be visualized",
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Plotly",
                            "desc": "the DataContainer containing the Plotly Image visualization of the input image"
                        }
                    ],
                    "path": "DATA/VISUALIZATION/PLOTLY/IMAGE/IMAGE.py"
                },
                "position": {
                    "x": 2114.6961872646334,
                    "y": 477.53840216593176
                },
                "width": 225,
                "height": 225,
                "selected": false,
                "positionAbsolute": {
                    "x": 2114.6961872646334,
                    "y": 477.53840216593176
                },
                "dragging": false
            }
        ],
        "edges": [
            {
                "id": "LOOP-4799dd2e-808c-4110-b0f7-0eaf4b32695a->TEXT-8c7eca61-dd2d-4141-875e-87ec4e5d51c8_1372129f-7a31-4860-991b-59dcfdbe1749",
                "source": "LOOP-4799dd2e-808c-4110-b0f7-0eaf4b32695a",
                "target": "TEXT-8c7eca61-dd2d-4141-875e-87ec4e5d51c8",
                "sourceHandle": "end",
                "targetHandle": "_",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "TEXT-8c7eca61-dd2d-4141-875e-87ec4e5d51c8->TEXT_VIEW-e4c44264-4164-41ef-9999-0df8a03d4631_a85aae52-59c3-452a-b65f-91356566a26c",
                "source": "TEXT-8c7eca61-dd2d-4141-875e-87ec4e5d51c8",
                "target": "TEXT_VIEW-e4c44264-4164-41ef-9999-0df8a03d4631",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "String"
                }
            },
            {
                "id": "LOOP-4799dd2e-808c-4110-b0f7-0eaf4b32695a->CONSTANT-d08387ec-35ba-4dca-86ef-c1921d203a66_71551a73-574c-4fd3-b0df-1f3ff47bf8e1",
                "source": "LOOP-4799dd2e-808c-4110-b0f7-0eaf4b32695a",
                "target": "CONSTANT-d08387ec-35ba-4dca-86ef-c1921d203a66",
                "sourceHandle": "body",
                "targetHandle": "default",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "CONSTANT-d08387ec-35ba-4dca-86ef-c1921d203a66->FEEDBACK-7cc13e0e-79a7-4284-be50-02c538569825_35f61a15-e7a6-4e2c-a42d-fd818cdc6224",
                "source": "CONSTANT-d08387ec-35ba-4dca-86ef-c1921d203a66",
                "target": "FEEDBACK-7cc13e0e-79a7-4284-be50-02c538569825",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "OrderedPair"
                }
            },
            {
                "id": "FEEDBACK-7cc13e0e-79a7-4284-be50-02c538569825->ADD-1ccadbd0-3361-44eb-9bfc-7785fe03cde3_f93db1e9-f99b-4569-977f-9cfcdae2c16f",
                "source": "FEEDBACK-7cc13e0e-79a7-4284-be50-02c538569825",
                "target": "ADD-1ccadbd0-3361-44eb-9bfc-7785fe03cde3",
                "sourceHandle": "default",
                "targetHandle": "b",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "LOOP-4799dd2e-808c-4110-b0f7-0eaf4b32695a->CONSTANT-277fcb9c-0fa9-49f1-b206-7e0ce4ae82b6_f7e24cb3-c4a1-4b2a-98b4-8324a72d3367",
                "source": "LOOP-4799dd2e-808c-4110-b0f7-0eaf4b32695a",
                "target": "CONSTANT-277fcb9c-0fa9-49f1-b206-7e0ce4ae82b6",
                "sourceHandle": "body",
                "targetHandle": "default",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "CONSTANT-d08387ec-35ba-4dca-86ef-c1921d203a66->TEXT-6d844c0a-d958-4200-9304-bf15c1fcf0f4_477cbb91-0e8f-4ef3-ad48-41b7b8780d61",
                "source": "CONSTANT-d08387ec-35ba-4dca-86ef-c1921d203a66",
                "target": "TEXT-6d844c0a-d958-4200-9304-bf15c1fcf0f4",
                "sourceHandle": "default",
                "targetHandle": "_",
                "data": {
                    "outputType": "OrderedPair"
                }
            },
            {
                "id": "TEXT-6d844c0a-d958-4200-9304-bf15c1fcf0f4->TEXT_VIEW-754f069a-4287-4814-aabf-7504254929af_b323e0cc-67ae-4e98-91ff-d040ad624450",
                "source": "TEXT-6d844c0a-d958-4200-9304-bf15c1fcf0f4",
                "target": "TEXT_VIEW-754f069a-4287-4814-aabf-7504254929af",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "String"
                }
            },
            {
                "id": "CONSTANT-277fcb9c-0fa9-49f1-b206-7e0ce4ae82b6->ADD-1ccadbd0-3361-44eb-9bfc-7785fe03cde3_b8802890-0772-4925-be5f-05b3a5b636ea",
                "source": "CONSTANT-277fcb9c-0fa9-49f1-b206-7e0ce4ae82b6",
                "target": "ADD-1ccadbd0-3361-44eb-9bfc-7785fe03cde3",
                "sourceHandle": "default",
                "targetHandle": "a",
                "data": {
                    "outputType": "OrderedPair"
                }
            },
            {
                "id": "CONSTANT-277fcb9c-0fa9-49f1-b206-7e0ce4ae82b6->TEXT-3ea8c0f2-8081-489a-bf09-5c60e142a429_fc84e697-8ff9-4d63-97e6-d483a42b38cb",
                "source": "CONSTANT-277fcb9c-0fa9-49f1-b206-7e0ce4ae82b6",
                "target": "TEXT-3ea8c0f2-8081-489a-bf09-5c60e142a429",
                "sourceHandle": "default",
                "targetHandle": "_",
                "data": {
                    "outputType": "OrderedPair"
                }
            },
            {
                "id": "TEXT-3ea8c0f2-8081-489a-bf09-5c60e142a429->TEXT_VIEW-e90aef26-4991-4468-94b9-bb5afba06e49_be1940af-30d4-464e-ac6f-57c680c3fd2e",
                "source": "TEXT-3ea8c0f2-8081-489a-bf09-5c60e142a429",
                "target": "TEXT_VIEW-e90aef26-4991-4468-94b9-bb5afba06e49",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "String"
                }
            },
            {
                "id": "ADD-1ccadbd0-3361-44eb-9bfc-7785fe03cde3->CONDITIONAL-1bb1c29c-65ef-4cf1-a6ba-8a055ce59446_f5521328-5c93-4600-935e-588960cb1665",
                "source": "ADD-1ccadbd0-3361-44eb-9bfc-7785fe03cde3",
                "target": "CONDITIONAL-1bb1c29c-65ef-4cf1-a6ba-8a055ce59446",
                "sourceHandle": "default",
                "targetHandle": "x",
                "data": {
                    "outputType": "OrderedPair"
                }
            },
            {
                "id": "CONSTANT-277fcb9c-0fa9-49f1-b206-7e0ce4ae82b6->BATCH_PROCESSOR-f3677952-0247-499c-9cb6-23cdeb358a1d_fa8d63d6-b382-421f-8e3e-08c557677b3e",
                "source": "CONSTANT-277fcb9c-0fa9-49f1-b206-7e0ce4ae82b6",
                "target": "BATCH_PROCESSOR-f3677952-0247-499c-9cb6-23cdeb358a1d",
                "sourceHandle": "default",
                "targetHandle": "current_iteration",
                "data": {
                    "outputType": "OrderedPair"
                }
            },
            {
                "id": "BATCH_PROCESSOR-f3677952-0247-499c-9cb6-23cdeb358a1d->CONDITIONAL-1bb1c29c-65ef-4cf1-a6ba-8a055ce59446_1cb0d9ac-0b5d-4494-bbc3-f61c7bb3919b",
                "source": "BATCH_PROCESSOR-f3677952-0247-499c-9cb6-23cdeb358a1d",
                "target": "CONDITIONAL-1bb1c29c-65ef-4cf1-a6ba-8a055ce59446",
                "sourceHandle": "n_files",
                "targetHandle": "y",
                "data": {
                    "outputType": "Scalar"
                },
                "selected": false
            },
            {
                "id": "CONDITIONAL-1bb1c29c-65ef-4cf1-a6ba-8a055ce59446->BREAK-c8f58dea-991a-425e-8057-ffcf3f389d43_8e6a4296-65f3-413c-9dc7-d56fb2d50c23",
                "source": "CONDITIONAL-1bb1c29c-65ef-4cf1-a6ba-8a055ce59446",
                "target": "BREAK-c8f58dea-991a-425e-8057-ffcf3f389d43",
                "sourceHandle": "false",
                "targetHandle": "default",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "FEEDBACK-38e32f8e-1f97-410a-b55e-8db36b8fabfd->BIG_NUMBER-a7a0214a-4266-408d-a089-0c57579332cb_7bb73784-d213-45e3-85cd-c62c48ff76bb",
                "source": "FEEDBACK-38e32f8e-1f97-410a-b55e-8db36b8fabfd",
                "target": "BIG_NUMBER-a7a0214a-4266-408d-a089-0c57579332cb",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "CONDITIONAL-1bb1c29c-65ef-4cf1-a6ba-8a055ce59446->FEEDBACK-38e32f8e-1f97-410a-b55e-8db36b8fabfd_98211d04-a7d8-4059-b40a-5f27085e5273",
                "source": "CONDITIONAL-1bb1c29c-65ef-4cf1-a6ba-8a055ce59446",
                "target": "FEEDBACK-38e32f8e-1f97-410a-b55e-8db36b8fabfd",
                "sourceHandle": "true",
                "targetHandle": "default",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "FEEDBACK-38e32f8e-1f97-410a-b55e-8db36b8fabfd->BATCH_PROCESSOR-88d4def0-9e63-4ab5-84f4-50f89670055f_d63338f2-c938-4ee8-adfb-f73a906d8b90",
                "source": "FEEDBACK-38e32f8e-1f97-410a-b55e-8db36b8fabfd",
                "target": "BATCH_PROCESSOR-88d4def0-9e63-4ab5-84f4-50f89670055f",
                "sourceHandle": "default",
                "targetHandle": "current_iteration",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "BATCH_PROCESSOR-88d4def0-9e63-4ab5-84f4-50f89670055f->LOCAL_FILE-0036b1aa-b83a-474b-8a31-54dcbc89d4b1_c22a05b0-386f-4a8d-80e1-a7c18c3158ef",
                "source": "BATCH_PROCESSOR-88d4def0-9e63-4ab5-84f4-50f89670055f",
                "target": "LOCAL_FILE-0036b1aa-b83a-474b-8a31-54dcbc89d4b1",
                "sourceHandle": "fname",
                "targetHandle": "default",
                "data": {
                    "outputType": "String"
                }
            },
            {
                "id": "LOCAL_FILE-0036b1aa-b83a-474b-8a31-54dcbc89d4b1->IMAGE-b93b361c-80e0-459f-badd-656b86975e88_a65db6d0-3969-4f8d-951c-65e66302b554",
                "source": "LOCAL_FILE-0036b1aa-b83a-474b-8a31-54dcbc89d4b1",
                "target": "IMAGE-b93b361c-80e0-459f-badd-656b86975e88",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "Image"
                }
            }
        ]
    },
    "textNodes": [],
    "controlNodes": [],
    "controlVisualizationNodes": [],
    "controlTextNodes": []
}