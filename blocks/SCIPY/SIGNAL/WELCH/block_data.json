{
  "docstring": {
    "long_description": "The description of that function is as follows:\n\n        Estimate power spectral density using Welch's method.\n\n        Welch's method [1]_ computes an estimate of the power spectral density by dividing the data into overlapping segments,\n        computing a modified periodogram for each segment, and averaging the periodograms.",
    "short_description": "The WELCH node is based on a numpy or scipy function.",
    "parameters": [
      {
        "name": "select_return",
        "type": "'f', 'Pxx'",
        "description": "Select the desired object to return.\nSee the respective function docs for descriptors."
      },
      {
        "name": "x",
        "type": "array_like",
        "description": "Time series of measurement values."
      },
      {
        "name": "fs",
        "type": "float",
        "description": "Sampling frequency of the 'x' time series.\nDefaults to 1.0."
      },
      {
        "name": "window",
        "type": "str or tuple or array_like",
        "description": "Desired window to use. If 'window' is a string or tuple, it is\npassed to 'get_window' to generate the window values, which are\nDFT-even by default.\nSee 'get_window' for a list of windows and required parameters.\nIf 'window' is array_like,it will be used directly as the window\nand its length must be nperseg.\nDefaults to a Hann window."
      },
      {
        "name": "nperseg",
        "type": "int",
        "description": "Length of each segment.\nDefaults to None, but if window is str or tuple, is set to 256,\nand if window is array_like, is set to the length of the window."
      },
      {
        "name": "noverlap",
        "type": "int",
        "description": "Number of points to overlap between segments.\nIf 'None', noverlap = nperseg // 2.\nDefaults to 'None'."
      },
      {
        "name": "nfft",
        "type": "int",
        "description": "Length of the FFT used, if a zero padded FFT is desired.\nIf 'None', the FFT length is 'nperseg'.\nDefaults to 'None'."
      },
      {
        "name": "detrend",
        "type": "str or function or 'False'",
        "description": "Specifies how to detrend each segment.\nIf 'detrend' is a string, it is passed as the 'type' argument to the 'detrend' function.\nIf it is a function, it takes a segment and returns a detrended segment.\nIf 'detrend' is 'False', no detrending is done.\nDefaults to 'constant'."
      },
      {
        "name": "return_onesided",
        "type": "bool",
        "description": "If 'True', returns a one-sided spectrum for real data.\nIf 'False', returns a two-sided spectrum.\nDefaults to 'True', but for complex data, a two-sided spectrum is always returned."
      },
      {
        "name": "scaling",
        "type": "{ 'density', 'spectrum' }",
        "description": "Selects between computing the power spectral density ('density')\nwhere 'Pxx' has units of V**2/Hz and computing the power\nspectrum ('spectrum') where 'Pxx' has units of V**2, if 'x'\nis measured in V and 'fs' is measured in Hz.\nDefaults to 'density'."
      },
      {
        "name": "axis",
        "type": "int",
        "description": "Axis along which the periodogram is computed.\nThe default is over the last axis (i.e. axis=-1)."
      },
      {
        "name": "average",
        "type": "{ 'mean', 'median' }",
        "description": "Method to use when averaging periodograms.\nDefaults to 'mean'."
      },
      {
        "name": ".. versionadded",
        "type": ": 1.2.0",
        "description": null
      }
    ],
    "returns": [
      {
        "name": null,
        "type": "DataContainer",
        "description": "type 'ordered pair', 'scalar', or 'matrix'"
      }
    ]
  }
}