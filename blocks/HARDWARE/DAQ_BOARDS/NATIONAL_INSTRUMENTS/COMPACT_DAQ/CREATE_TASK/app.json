{
    "rfInstance": {
        "nodes": [
            {
                "id": "CREATE_TASK-6c93607e-7e96-49b7-9d89-f51e60bf425f",
                "type": "NATIONAL_INSTRUMENTS",
                "data": {
                    "id": "CREATE_TASK-6c93607e-7e96-49b7-9d89-f51e60bf425f",
                    "label": "CREATE TASK 1",
                    "func": "CREATE_TASK",
                    "type": "NATIONAL_INSTRUMENTS",
                    "ctrls": {
                        "task_name": {
                            "type": "str",
                            "default": null,
                            "desc": "The name of the task to create.",
                            "overload": null,
                            "functionName": "CREATE_TASK",
                            "param": "task_name",
                            "value": "task"
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": "This block does not return any meaningful data;"
                        }
                    ],
                    "pip_dependencies": [
                        {
                            "name": "nidaqmx",
                            "v": "0.9.0"
                        }
                    ],
                    "path": "HARDWARE/DAQ_BOARDS/NATIONAL_INSTRUMENTS/COMPACT_DAQ/CREATE_TASK/CREATE_TASK.py"
                },
                "position": {
                    "x": -775.3168719201651,
                    "y": -362.6484593866646
                },
                "width": 216,
                "height": 233,
                "selected": false,
                "positionAbsolute": {
                    "x": -775.3168719201651,
                    "y": -362.6484593866646
                },
                "dragging": false
            },
            {
                "id": "ATTACH_ANALOG_INPUT_THERMOCOUPLE-1af25251-8a74-48df-b7a1-cf79eee7a9ec",
                "type": "NATIONAL_INSTRUMENTS",
                "data": {
                    "id": "ATTACH_ANALOG_INPUT_THERMOCOUPLE-1af25251-8a74-48df-b7a1-cf79eee7a9ec",
                    "label": "ATTACH ANALOG INPUT THERMOCOUPLE 1",
                    "func": "ATTACH_ANALOG_INPUT_THERMOCOUPLE",
                    "type": "NATIONAL_INSTRUMENTS",
                    "ctrls": {
                        "task_name": {
                            "type": "str",
                            "default": null,
                            "desc": "The name of the task to attach the channel(s) to.",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_THERMOCOUPLE",
                            "param": "task_name",
                            "value": "task"
                        },
                        "cDAQ_start_channel": {
                            "type": "NIDAQmxDevice",
                            "default": null,
                            "desc": "The device and channel to read from.",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_THERMOCOUPLE",
                            "param": "cDAQ_start_channel",
                            "value": ""
                        },
                        "cDAQ_end_channel": {
                            "type": "NIDAQmxDevice",
                            "default": null,
                            "desc": "To read from only one channel, set this to the same as `cDAQ_start_channel`. To read from multiple channels, set this to the last channel you want to read from.",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_THERMOCOUPLE",
                            "param": "cDAQ_end_channel",
                            "value": ""
                        },
                        "min_val": {
                            "type": "float",
                            "default": 0,
                            "desc": "Specifies in **units** the minimum value you expect to measure (default is 0.0).",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_THERMOCOUPLE",
                            "param": "min_val",
                            "value": 0
                        },
                        "max_val": {
                            "type": "float",
                            "default": 100,
                            "desc": "Specifies in **units** the maximum value you expect to measure (default is 100.0).",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_THERMOCOUPLE",
                            "param": "max_val",
                            "value": 100
                        },
                        "units": {
                            "type": "select",
                            "default": "Celsius",
                            "options": [
                                "Celsius",
                                "Fahrenheit",
                                "Rankine",
                                "Kelvin"
                            ],
                            "desc": "The units to use to return thermocouple measurements (default is \"Celsius\").",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_THERMOCOUPLE",
                            "param": "units",
                            "value": "Celsius"
                        },
                        "thermocouple_type": {
                            "type": "select",
                            "default": "J",
                            "options": [
                                "K",
                                "R",
                                "N",
                                "E",
                                "J",
                                "S",
                                "T",
                                "B"
                            ],
                            "desc": "The type of thermocouple being used (default is \"J\").",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_THERMOCOUPLE",
                            "param": "thermocouple_type",
                            "value": "J"
                        },
                        "cold_junction_source": {
                            "type": "select",
                            "default": "Constant",
                            "options": [
                                "Constant",
                                "Channel",
                                "Built In"
                            ],
                            "desc": "Specifies the source of cold junction compensation (default is \"Constant\").",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_THERMOCOUPLE",
                            "param": "cold_junction_source",
                            "value": "Constant"
                        },
                        "cold_junction_value": {
                            "type": "float",
                            "default": 25,
                            "desc": "Specifies the cold junction temperature in **units** if `cold_junction_source` is set to \"Constant\" (default is 25.0).",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_THERMOCOUPLE",
                            "param": "cold_junction_value",
                            "value": 25
                        },
                        "cold_junction_channel": {
                            "type": "str",
                            "default": "",
                            "desc": "Specifies the source of cold junction compensation if `cold_junction_source` is set to \"Channel\" (default is \"\").",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_THERMOCOUPLE",
                            "param": "cold_junction_channel",
                            "value": ""
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": "This block does not return any meaningful data; it is designed for creating a task to measure temperature using a thermocouple."
                        }
                    ],
                    "pip_dependencies": [
                        {
                            "name": "nidaqmx",
                            "v": "0.9.0"
                        }
                    ],
                    "path": "HARDWARE/DAQ_BOARDS/NATIONAL_INSTRUMENTS/COMPACT_DAQ/ATTACH_ANALOG_INPUT_THERMOCOUPLE/ATTACH_ANALOG_INPUT_THERMOCOUPLE.py"
                },
                "position": {
                    "x": -425.7645184419778,
                    "y": -369.8425384331779
                },
                "width": 260,
                "height": 305,
                "selected": false,
                "positionAbsolute": {
                    "x": -425.7645184419778,
                    "y": -369.8425384331779
                },
                "dragging": false
            },
            {
                "id": "READ_TASK-5ed526f7-263d-46d3-89da-c55a9faaf848",
                "type": "NATIONAL_INSTRUMENTS",
                "data": {
                    "id": "READ_TASK-5ed526f7-263d-46d3-89da-c55a9faaf848",
                    "label": "READ TASK 2",
                    "func": "READ_TASK",
                    "type": "NATIONAL_INSTRUMENTS",
                    "ctrls": {
                        "task_name": {
                            "type": "str",
                            "default": null,
                            "desc": "The name of the task to read from.",
                            "overload": null,
                            "functionName": "READ_TASK",
                            "param": "task_name",
                            "value": "task"
                        },
                        "number_of_samples_per_channel": {
                            "type": "int",
                            "default": 1,
                            "desc": "Number of samples to read (default is 1).",
                            "overload": null,
                            "functionName": "READ_TASK",
                            "param": "number_of_samples_per_channel",
                            "value": 10
                        },
                        "timeout": {
                            "type": "float",
                            "default": 10,
                            "desc": "Time to wait for samples to become available. If set to 0, the method tries once to read the requested samples and returns an error if it is unable to (default is 10.0 seconds).",
                            "overload": null,
                            "functionName": "READ_TASK",
                            "param": "timeout",
                            "value": 10
                        },
                        "wait_infinitely": {
                            "type": "bool",
                            "default": false,
                            "desc": "If True, the method waits indefinitely for samples to become available. If False, the method waits for the amount of time specified by `timeout` (default is False).",
                            "overload": null,
                            "functionName": "READ_TASK",
                            "param": "wait_infinitely",
                            "value": false
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Vector|Matrix",
                            "desc": "Samples read from the device."
                        }
                    ],
                    "pip_dependencies": [
                        {
                            "name": "nidaqmx",
                            "v": "0.9.0"
                        }
                    ],
                    "path": "HARDWARE/DAQ_BOARDS/NATIONAL_INSTRUMENTS/COMPACT_DAQ/READ_TASK/READ_TASK.py"
                },
                "position": {
                    "x": -32.3681644373153,
                    "y": -369.0073759078333
                },
                "width": 216,
                "height": 197,
                "selected": false,
                "positionAbsolute": {
                    "x": -32.3681644373153,
                    "y": -369.0073759078333
                },
                "dragging": false
            },
            {
                "id": "TASK_WAIT_UNTIL_DONE-04c0ae35-fad9-4227-bb9d-22885332df60",
                "type": "NATIONAL_INSTRUMENTS",
                "data": {
                    "id": "TASK_WAIT_UNTIL_DONE-04c0ae35-fad9-4227-bb9d-22885332df60",
                    "label": "TASK WAIT UNTIL DONE",
                    "func": "TASK_WAIT_UNTIL_DONE",
                    "type": "NATIONAL_INSTRUMENTS",
                    "ctrls": {
                        "task_name": {
                            "type": "str",
                            "default": null,
                            "desc": "The name of the task to wait for.",
                            "overload": null,
                            "functionName": "TASK_WAIT_UNTIL_DONE",
                            "param": "task_name",
                            "value": "task"
                        },
                        "timeout": {
                            "type": "float",
                            "default": 10,
                            "desc": "Specifies the maximum amount of time in seconds to wait for the measurement or generation to complete. This method returns an error if the time elapses.",
                            "overload": null,
                            "functionName": "TASK_WAIT_UNTIL_DONE",
                            "param": "timeout",
                            "value": 100
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": "Return the input"
                        }
                    ],
                    "pip_dependencies": [
                        {
                            "name": "nidaqmx",
                            "v": "0.9.0"
                        }
                    ],
                    "path": "HARDWARE/DAQ_BOARDS/NATIONAL_INSTRUMENTS/COMPACT_DAQ/TASK_WAIT_UNTIL_DONE/TASK_WAIT_UNTIL_DONE.py"
                },
                "position": {
                    "x": 340.4224223722875,
                    "y": -368.9985361334934
                },
                "width": 216,
                "height": 233,
                "selected": false,
                "positionAbsolute": {
                    "x": 340.4224223722875,
                    "y": -368.9985361334934
                },
                "dragging": false
            },
            {
                "id": "LINE-9825908c-be6b-4351-bcbc-18bd81699daa",
                "type": "VISUALIZATION",
                "data": {
                    "id": "LINE-9825908c-be6b-4351-bcbc-18bd81699daa",
                    "label": "LINE",
                    "func": "LINE",
                    "type": "VISUALIZATION",
                    "ctrls": {
                        "xaxis_title": {
                            "type": "str",
                            "default": "",
                            "desc": "Choose the label for the x axis.",
                            "overload": null,
                            "functionName": "LINE",
                            "param": "xaxis_title",
                            "value": ""
                        },
                        "yaxis_title": {
                            "type": "str",
                            "default": "",
                            "desc": "Choose the label for the y axis.",
                            "overload": null,
                            "functionName": "LINE",
                            "param": "yaxis_title",
                            "value": ""
                        },
                        "x_log_scale": {
                            "type": "bool",
                            "default": false,
                            "desc": null,
                            "overload": null,
                            "functionName": "LINE",
                            "param": "x_log_scale",
                            "value": false
                        },
                        "y_log_scale": {
                            "type": "bool",
                            "default": false,
                            "desc": null,
                            "overload": null,
                            "functionName": "LINE",
                            "param": "y_log_scale",
                            "value": false
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "OrderedPair|DataFrame|Matrix|Vector",
                            "desc": "the DataContainer to be visualized",
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Plotly",
                            "desc": "the DataContainer containing the Plotly Line visualization of the input data"
                        }
                    ],
                    "path": "DATA/VISUALIZATION/PLOTLY/LINE/LINE.py"
                },
                "position": {
                    "x": 719.0142934690757,
                    "y": -406.34209194537164
                },
                "width": 225,
                "height": 225,
                "selected": false,
                "positionAbsolute": {
                    "x": 719.0142934690757,
                    "y": -406.34209194537164
                },
                "dragging": false
            },
            {
                "id": "CREATE_TASK-39607c6e-cd34-4212-b5cb-6ca89e321049",
                "type": "NATIONAL_INSTRUMENTS",
                "data": {
                    "id": "CREATE_TASK-39607c6e-cd34-4212-b5cb-6ca89e321049",
                    "label": "CREATE TASK",
                    "func": "CREATE_TASK",
                    "type": "NATIONAL_INSTRUMENTS",
                    "ctrls": {
                        "task_name": {
                            "type": "str",
                            "default": null,
                            "desc": "The name of the task to create.",
                            "overload": null,
                            "functionName": "CREATE_TASK",
                            "param": "task_name",
                            "value": "task2"
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": "This block does not return any meaningful data;"
                        }
                    ],
                    "pip_dependencies": [
                        {
                            "name": "nidaqmx",
                            "v": "0.9.0"
                        }
                    ],
                    "path": "HARDWARE/DAQ_BOARDS/NATIONAL_INSTRUMENTS/COMPACT_DAQ/CREATE_TASK/CREATE_TASK.py"
                },
                "position": {
                    "x": -762.1759508072017,
                    "y": -58.49252747537423
                },
                "width": 216,
                "height": 197,
                "selected": false,
                "positionAbsolute": {
                    "x": -762.1759508072017,
                    "y": -58.49252747537423
                },
                "dragging": false
            },
            {
                "id": "ATTACH_ANALOG_INPUT_VOLTAGE-72286d3d-882f-40d5-8ac7-8596c1fca0c1",
                "type": "NATIONAL_INSTRUMENTS",
                "data": {
                    "id": "ATTACH_ANALOG_INPUT_VOLTAGE-72286d3d-882f-40d5-8ac7-8596c1fca0c1",
                    "label": "ATTACH ANALOG INPUT VOLTAGE",
                    "func": "ATTACH_ANALOG_INPUT_VOLTAGE",
                    "type": "NATIONAL_INSTRUMENTS",
                    "ctrls": {
                        "task_name": {
                            "type": "str",
                            "default": null,
                            "desc": "The name of the task to attach the channel(s) to.",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_VOLTAGE",
                            "param": "task_name",
                            "value": "task2"
                        },
                        "cDAQ_start_channel": {
                            "type": "NIDAQmxDevice",
                            "default": null,
                            "desc": "The device and channel to read from.",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_VOLTAGE",
                            "param": "cDAQ_start_channel",
                            "value": ""
                        },
                        "cDAQ_end_channel": {
                            "type": "NIDAQmxDevice",
                            "default": null,
                            "desc": "To read from only one channel, set this to the same as `cDAQ_start_channel`. To read from multiple channels, set this to the last channel you want to read from.",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_VOLTAGE",
                            "param": "cDAQ_end_channel",
                            "value": ""
                        },
                        "min_val": {
                            "type": "float",
                            "default": -5,
                            "desc": "Specifies in **units** the minimum value you expect to measure (default is -5.00).",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_VOLTAGE",
                            "param": "min_val",
                            "value": -60
                        },
                        "max_val": {
                            "type": "float",
                            "default": 5,
                            "desc": "Specifies in **units** the maximum value you expect to measure (default is 5.00).",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_VOLTAGE",
                            "param": "max_val",
                            "value": 60
                        },
                        "units": {
                            "type": "select",
                            "default": "VOLTS",
                            "options": [
                                "VOLTS"
                            ],
                            "desc": "The units to use to return voltage measurements (default is \"VOLTS\").",
                            "overload": null,
                            "functionName": "ATTACH_ANALOG_INPUT_VOLTAGE",
                            "param": "units",
                            "value": "VOLTS"
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": "This block does not return any meaningful data; it is designed for creating a task to measure voltage."
                        }
                    ],
                    "pip_dependencies": [
                        {
                            "name": "nidaqmx",
                            "v": "0.9.0"
                        }
                    ],
                    "path": "HARDWARE/DAQ_BOARDS/NATIONAL_INSTRUMENTS/COMPACT_DAQ/ATTACH_ANALOG_INPUT_VOLTAGE/ATTACH_ANALOG_INPUT_VOLTAGE.py"
                },
                "position": {
                    "x": -383.83714477723333,
                    "y": -56.65174026688038
                },
                "width": 216,
                "height": 305,
                "selected": false,
                "positionAbsolute": {
                    "x": -383.83714477723333,
                    "y": -56.65174026688038
                },
                "dragging": false
            },
            {
                "id": "CONFIG_TASK_SAMPLE_CLOCK_TIMING-204351a8-9967-4272-87db-0ac0367ca73e",
                "type": "NATIONAL_INSTRUMENTS",
                "data": {
                    "id": "CONFIG_TASK_SAMPLE_CLOCK_TIMING-204351a8-9967-4272-87db-0ac0367ca73e",
                    "label": "CONFIG TASK SAMPLE CLOCK TIMING",
                    "func": "CONFIG_TASK_SAMPLE_CLOCK_TIMING",
                    "type": "NATIONAL_INSTRUMENTS",
                    "ctrls": {
                        "task_name": {
                            "type": "str",
                            "default": null,
                            "desc": "The name of the task to configure.",
                            "overload": null,
                            "functionName": "CONFIG_TASK_SAMPLE_CLOCK_TIMING",
                            "param": "task_name",
                            "value": "task2"
                        },
                        "sample_clock_rate": {
                            "type": "float",
                            "default": 1000,
                            "desc": "Specifies the sampling rate in samples per channel per second. If using an external source for the Sample Clock, set this input to the maximum expected rate of that clock. Uses the onboard clock of the device (default is 1000.0).",
                            "overload": null,
                            "functionName": "CONFIG_TASK_SAMPLE_CLOCK_TIMING",
                            "param": "sample_clock_rate",
                            "value": 1000
                        },
                        "number_of_samples_per_channel": {
                            "type": "int",
                            "default": 1000,
                            "desc": "Specifies the number of samples to acquire or generate for each channel in the task (default is 1000).",
                            "overload": null,
                            "functionName": "CONFIG_TASK_SAMPLE_CLOCK_TIMING",
                            "param": "number_of_samples_per_channel",
                            "value": 1000
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": "This block does not return any meaningful data; it is designed for configuring the task's sample clock timing."
                        }
                    ],
                    "pip_dependencies": [
                        {
                            "name": "nidaqmx",
                            "v": "0.9.0"
                        }
                    ],
                    "path": "HARDWARE/DAQ_BOARDS/NATIONAL_INSTRUMENTS/COMPACT_DAQ/CONFIG_TASK_SAMPLE_CLOCK_TIMING/CONFIG_TASK_SAMPLE_CLOCK_TIMING.py"
                },
                "position": {
                    "x": -18.04606785344965,
                    "y": -56.98908762829268
                },
                "width": 216,
                "height": 341,
                "selected": false,
                "positionAbsolute": {
                    "x": -18.04606785344965,
                    "y": -56.98908762829268
                },
                "dragging": false
            },
            {
                "id": "READ_TASK-2e54fee2-46a1-4eda-a6a8-d9d72f3e842f",
                "type": "NATIONAL_INSTRUMENTS",
                "data": {
                    "id": "READ_TASK-2e54fee2-46a1-4eda-a6a8-d9d72f3e842f",
                    "label": "READ TASK",
                    "func": "READ_TASK",
                    "type": "NATIONAL_INSTRUMENTS",
                    "ctrls": {
                        "task_name": {
                            "type": "str",
                            "default": null,
                            "desc": "The name of the task to read from.",
                            "overload": null,
                            "functionName": "READ_TASK",
                            "param": "task_name",
                            "value": "task2"
                        },
                        "number_of_samples_per_channel": {
                            "type": "int",
                            "default": 1,
                            "desc": "Number of samples to read (default is 1).",
                            "overload": null,
                            "functionName": "READ_TASK",
                            "param": "number_of_samples_per_channel",
                            "value": 100
                        },
                        "timeout": {
                            "type": "float",
                            "default": 10,
                            "desc": "Time to wait for samples to become available. If set to 0, the method tries once to read the requested samples and returns an error if it is unable to (default is 10.0 seconds).",
                            "overload": null,
                            "functionName": "READ_TASK",
                            "param": "timeout",
                            "value": 10
                        },
                        "wait_infinitely": {
                            "type": "bool",
                            "default": false,
                            "desc": "If True, the method waits indefinitely for samples to become available. If False, the method waits for the amount of time specified by `timeout` (default is False).",
                            "overload": null,
                            "functionName": "READ_TASK",
                            "param": "wait_infinitely",
                            "value": false
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Any",
                            "desc": null,
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Vector|Matrix",
                            "desc": "Samples read from the device."
                        }
                    ],
                    "pip_dependencies": [
                        {
                            "name": "nidaqmx",
                            "v": "0.9.0"
                        }
                    ],
                    "path": "HARDWARE/DAQ_BOARDS/NATIONAL_INSTRUMENTS/COMPACT_DAQ/READ_TASK/READ_TASK.py"
                },
                "position": {
                    "x": 343.2866395000674,
                    "y": -55.067972611971356
                },
                "width": 216,
                "height": 197,
                "selected": false,
                "dragging": false,
                "positionAbsolute": {
                    "x": 343.2866395000674,
                    "y": -55.067972611971356
                }
            },
            {
                "id": "LINE-e544025f-554b-4f38-999a-535495748b4c",
                "type": "VISUALIZATION",
                "data": {
                    "id": "LINE-e544025f-554b-4f38-999a-535495748b4c",
                    "label": "LINE 1",
                    "func": "LINE",
                    "type": "VISUALIZATION",
                    "ctrls": {
                        "xaxis_title": {
                            "type": "str",
                            "default": "",
                            "desc": "Choose the label for the x axis.",
                            "overload": null,
                            "functionName": "LINE",
                            "param": "xaxis_title",
                            "value": ""
                        },
                        "yaxis_title": {
                            "type": "str",
                            "default": "",
                            "desc": "Choose the label for the y axis.",
                            "overload": null,
                            "functionName": "LINE",
                            "param": "yaxis_title",
                            "value": ""
                        },
                        "x_log_scale": {
                            "type": "bool",
                            "default": false,
                            "desc": null,
                            "overload": null,
                            "functionName": "LINE",
                            "param": "x_log_scale",
                            "value": false
                        },
                        "y_log_scale": {
                            "type": "bool",
                            "default": false,
                            "desc": null,
                            "overload": null,
                            "functionName": "LINE",
                            "param": "y_log_scale",
                            "value": false
                        }
                    },
                    "initCtrls": {},
                    "inputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "OrderedPair|DataFrame|Matrix|Vector",
                            "desc": "the DataContainer to be visualized",
                            "multiple": false
                        }
                    ],
                    "outputs": [
                        {
                            "name": "default",
                            "id": "default",
                            "type": "Plotly",
                            "desc": "the DataContainer containing the Plotly Line visualization of the input data"
                        }
                    ],
                    "path": "DATA/VISUALIZATION/PLOTLY/LINE/LINE.py"
                },
                "position": {
                    "x": 682.5760296270587,
                    "y": -91.637391274111
                },
                "width": 225,
                "height": 225,
                "selected": false,
                "positionAbsolute": {
                    "x": 682.5760296270587,
                    "y": -91.637391274111
                },
                "dragging": false
            }
        ],
        "edges": [
            {
                "id": "CREATE_TASK-6c93607e-7e96-49b7-9d89-f51e60bf425f->ATTACH_ANALOG_INPUT_THERMOCOUPLE-1af25251-8a74-48df-b7a1-cf79eee7a9ec_15e47e45-83f6-4ad7-a6c0-676fdf3433e6",
                "source": "CREATE_TASK-6c93607e-7e96-49b7-9d89-f51e60bf425f",
                "target": "ATTACH_ANALOG_INPUT_THERMOCOUPLE-1af25251-8a74-48df-b7a1-cf79eee7a9ec",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "ATTACH_ANALOG_INPUT_THERMOCOUPLE-1af25251-8a74-48df-b7a1-cf79eee7a9ec->READ_TASK-5ed526f7-263d-46d3-89da-c55a9faaf848_13b177e7-f74f-4b57-b2d0-5cebaa5a70a0",
                "source": "ATTACH_ANALOG_INPUT_THERMOCOUPLE-1af25251-8a74-48df-b7a1-cf79eee7a9ec",
                "target": "READ_TASK-5ed526f7-263d-46d3-89da-c55a9faaf848",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "READ_TASK-5ed526f7-263d-46d3-89da-c55a9faaf848->TASK_WAIT_UNTIL_DONE-04c0ae35-fad9-4227-bb9d-22885332df60_87b3f4fd-2c46-4538-871c-67ea58e9cb78",
                "source": "READ_TASK-5ed526f7-263d-46d3-89da-c55a9faaf848",
                "target": "TASK_WAIT_UNTIL_DONE-04c0ae35-fad9-4227-bb9d-22885332df60",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "Vector"
                }
            },
            {
                "id": "TASK_WAIT_UNTIL_DONE-04c0ae35-fad9-4227-bb9d-22885332df60->LINE-9825908c-be6b-4351-bcbc-18bd81699daa_a81d48e6-545c-472f-b0c2-9c1be0cb72d2",
                "source": "TASK_WAIT_UNTIL_DONE-04c0ae35-fad9-4227-bb9d-22885332df60",
                "target": "LINE-9825908c-be6b-4351-bcbc-18bd81699daa",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "CREATE_TASK-39607c6e-cd34-4212-b5cb-6ca89e321049->ATTACH_ANALOG_INPUT_VOLTAGE-72286d3d-882f-40d5-8ac7-8596c1fca0c1_d28d0536-e652-4346-999f-256d7d12e505",
                "source": "CREATE_TASK-39607c6e-cd34-4212-b5cb-6ca89e321049",
                "target": "ATTACH_ANALOG_INPUT_VOLTAGE-72286d3d-882f-40d5-8ac7-8596c1fca0c1",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "ATTACH_ANALOG_INPUT_VOLTAGE-72286d3d-882f-40d5-8ac7-8596c1fca0c1->CONFIG_TASK_SAMPLE_CLOCK_TIMING-204351a8-9967-4272-87db-0ac0367ca73e_376dadfe-80d4-4275-b57e-32c8f226476c",
                "source": "ATTACH_ANALOG_INPUT_VOLTAGE-72286d3d-882f-40d5-8ac7-8596c1fca0c1",
                "target": "CONFIG_TASK_SAMPLE_CLOCK_TIMING-204351a8-9967-4272-87db-0ac0367ca73e",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "CONFIG_TASK_SAMPLE_CLOCK_TIMING-204351a8-9967-4272-87db-0ac0367ca73e->READ_TASK-2e54fee2-46a1-4eda-a6a8-d9d72f3e842f_c015b8e7-8b85-4506-a0d0-418a92a48dc7",
                "source": "CONFIG_TASK_SAMPLE_CLOCK_TIMING-204351a8-9967-4272-87db-0ac0367ca73e",
                "target": "READ_TASK-2e54fee2-46a1-4eda-a6a8-d9d72f3e842f",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "Any"
                }
            },
            {
                "id": "READ_TASK-2e54fee2-46a1-4eda-a6a8-d9d72f3e842f->LINE-e544025f-554b-4f38-999a-535495748b4c_ee3c5ba9-75d7-46d5-845f-4c4a81e7e37d",
                "source": "READ_TASK-2e54fee2-46a1-4eda-a6a8-d9d72f3e842f",
                "target": "LINE-e544025f-554b-4f38-999a-535495748b4c",
                "sourceHandle": "default",
                "targetHandle": "default",
                "data": {
                    "outputType": "Vector"
                }
            }
        ]
    },
    "textNodes": [],
    "controlNodes": [],
    "controlVisualizationNodes": [],
    "controlTextNodes": []
}